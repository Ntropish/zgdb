// Generated by ZG. Do not edit.

import { ZgDatabase, ZgBaseNode, ZgAuthContext } from '@tsmk/zg-client';
import * as LowLevel from './schema_generated.js';

// --- Interfaces ---
export interface IComment {
  id: string;
  content: string;
  author: string;
  regards: string;
  createdAt: number;
}

export interface IFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: number;
}

export interface IImage_Metadata {
  width: number;
  height: number;
  format: string;
  createdAt: number;
}

export interface IImage {
  id: string;
  url: string;
  altText: string;
  metadata: any;
  postId: string;
  userId: string;
}

export interface IPostTag {
  id: string;
  postId: string;
  tagId: string;
}

export interface IPost {
  id: string;
  title: string;
  content: string;
  author: string;
  createdAt: number;
}

export interface IReaction {
  id: string;
  type: string;
  author: string;
  targetId: string;
  targetType: string;
}

export interface ITag {
  id: string;
  name: string;
}

export interface IUser {
  id: string;
  name: string;
  email: string;
}

// --- Node Classes ---
export class CommentNode extends ZgBaseNode<LowLevel.Comment> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get content(): string {
    return this.fbb.content();
  }

  get author(): string {
    return this.fbb.author();
  }

  get regards(): string {
    return this.fbb.regards();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class FollowNode extends ZgBaseNode<LowLevel.Follow> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get followerId(): string {
    return this.fbb.followerId();
  }

  get followingId(): string {
    return this.fbb.followingId();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class Image_MetadataNode extends ZgBaseNode<LowLevel.Image_Metadata> {
  // --- Fields ---
  get width(): number {
    return this.fbb.width();
  }

  get height(): number {
    return this.fbb.height();
  }

  get format(): string {
    return this.fbb.format();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ImageNode extends ZgBaseNode<LowLevel.Image> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get url(): string {
    return this.fbb.url();
  }

  get altText(): string {
    return this.fbb.altText();
  }

  get metadata(): any {
    return this.fbb.metadata();
  }

  get postId(): string {
    return this.fbb.postId();
  }

  get userId(): string {
    return this.fbb.userId();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostTagNode extends ZgBaseNode<LowLevel.PostTag> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get postId(): string {
    return this.fbb.postId();
  }

  get tagId(): string {
    return this.fbb.tagId();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostNode extends ZgBaseNode<LowLevel.Post> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get title(): string {
    return this.fbb.title();
  }

  get content(): string {
    return this.fbb.content();
  }

  get author(): string {
    return this.fbb.author();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ReactionNode extends ZgBaseNode<LowLevel.Reaction> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get type(): string {
    return this.fbb.type();
  }

  get author(): string {
    return this.fbb.author();
  }

  get targetId(): string {
    return this.fbb.targetId();
  }

  get targetType(): string {
    return this.fbb.targetType();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class TagNode extends ZgBaseNode<LowLevel.Tag> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get name(): string {
    return this.fbb.name();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class UserNode extends ZgBaseNode<LowLevel.User> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get name(): string {
    return this.fbb.name();
  }

  get email(): string {
    return this.fbb.email();
  }

  // --- Relationships ---
  // (to be implemented)
}

// --- Database Class ---
export class ZgClient {
  private db: ZgDatabase;
  private authContext: ZgAuthContext | null = null;

  constructor(config: any) {
    this.db = new ZgDatabase(config);
  }

  setAuthContext(context: ZgAuthContext) {
    this.authContext = context;
  }

  get comments() {
    return {
      get: async (id: string): Promise<CommentNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for Comment
        const result = await this.db.get<LowLevel.Comment, CommentNode>('Comment', id, (db, fbb, ac) => new CommentNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IComment>>): Promise<CommentNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for Comment
        return this.db.create<LowLevel.Comment, CommentNode>('Comment', data, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IComment>>): Promise<CommentNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for Comment
        return this.db.update<LowLevel.Comment, CommentNode>('Comment', id, data, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for Comment
        return this.db.delete('Comment', id);
      }
    };
  }

  get follows() {
    return {
      get: async (id: string): Promise<FollowNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for Follow
        const result = await this.db.get<LowLevel.Follow, FollowNode>('Follow', id, (db, fbb, ac) => new FollowNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IFollow>>): Promise<FollowNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for Follow
        return this.db.create<LowLevel.Follow, FollowNode>('Follow', data, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IFollow>>): Promise<FollowNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for Follow
        return this.db.update<LowLevel.Follow, FollowNode>('Follow', id, data, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for Follow
        return this.db.delete('Follow', id);
      }
    };
  }

  get image_Metadatas() {
    return {
      get: async (id: string): Promise<Image_MetadataNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for Image_Metadata
        const result = await this.db.get<LowLevel.Image_Metadata, Image_MetadataNode>('Image_Metadata', id, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IImage_Metadata>>): Promise<Image_MetadataNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for Image_Metadata
        return this.db.create<LowLevel.Image_Metadata, Image_MetadataNode>('Image_Metadata', data, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IImage_Metadata>>): Promise<Image_MetadataNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for Image_Metadata
        return this.db.update<LowLevel.Image_Metadata, Image_MetadataNode>('Image_Metadata', id, data, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for Image_Metadata
        return this.db.delete('Image_Metadata', id);
      }
    };
  }

  get images() {
    return {
      get: async (id: string): Promise<ImageNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for Image
        const result = await this.db.get<LowLevel.Image, ImageNode>('Image', id, (db, fbb, ac) => new ImageNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IImage>>): Promise<ImageNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for Image
        return this.db.create<LowLevel.Image, ImageNode>('Image', data, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IImage>>): Promise<ImageNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for Image
        return this.db.update<LowLevel.Image, ImageNode>('Image', id, data, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for Image
        return this.db.delete('Image', id);
      }
    };
  }

  get postTags() {
    return {
      get: async (id: string): Promise<PostTagNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for PostTag
        const result = await this.db.get<LowLevel.PostTag, PostTagNode>('PostTag', id, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IPostTag>>): Promise<PostTagNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for PostTag
        return this.db.create<LowLevel.PostTag, PostTagNode>('PostTag', data, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IPostTag>>): Promise<PostTagNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for PostTag
        return this.db.update<LowLevel.PostTag, PostTagNode>('PostTag', id, data, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for PostTag
        return this.db.delete('PostTag', id);
      }
    };
  }

  get posts() {
    return {
      get: async (id: string): Promise<PostNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for Post
        const result = await this.db.get<LowLevel.Post, PostNode>('Post', id, (db, fbb, ac) => new PostNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IPost>>): Promise<PostNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for Post
        return this.db.create<LowLevel.Post, PostNode>('Post', data, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IPost>>): Promise<PostNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for Post
        return this.db.update<LowLevel.Post, PostNode>('Post', id, data, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for Post
        return this.db.delete('Post', id);
      }
    };
  }

  get reactions() {
    return {
      get: async (id: string): Promise<ReactionNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for Reaction
        const result = await this.db.get<LowLevel.Reaction, ReactionNode>('Reaction', id, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IReaction>>): Promise<ReactionNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for Reaction
        return this.db.create<LowLevel.Reaction, ReactionNode>('Reaction', data, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IReaction>>): Promise<ReactionNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for Reaction
        return this.db.update<LowLevel.Reaction, ReactionNode>('Reaction', id, data, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for Reaction
        return this.db.delete('Reaction', id);
      }
    };
  }

  get tags() {
    return {
      get: async (id: string): Promise<TagNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for Tag
        const result = await this.db.get<LowLevel.Tag, TagNode>('Tag', id, (db, fbb, ac) => new TagNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<ITag>>): Promise<TagNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for Tag
        return this.db.create<LowLevel.Tag, TagNode>('Tag', data, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<ITag>>): Promise<TagNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for Tag
        return this.db.update<LowLevel.Tag, TagNode>('Tag', id, data, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for Tag
        return this.db.delete('Tag', id);
      }
    };
  }

  get users() {
    return {
      get: async (id: string): Promise<UserNode | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'read' auth rules defined for User
        const result = await this.db.get<LowLevel.User, UserNode>('User', id, (db, fbb, ac) => new UserNode(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<IUser>>): Promise<UserNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'create' auth rules defined for User
        return this.db.create<LowLevel.User, UserNode>('User', data, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IUser>>): Promise<UserNode> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'update' auth rules defined for User
        return this.db.update<LowLevel.User, UserNode>('User', id, data, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
        // No 'delete' auth rules defined for User
        return this.db.delete('User', id);
      }
    };
  }
}

export function createZgClient(config: any): ZgClient {
  return new ZgClient(config);
}
