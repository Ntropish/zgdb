// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

/**
 * Nested schema for metadata of Image
 */
export class Image_Metadata {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Image_Metadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsImage_Metadata(bb:flatbuffers.ByteBuffer, obj?:Image_Metadata):Image_Metadata {
  return (obj || new Image_Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsImage_Metadata(bb:flatbuffers.ByteBuffer, obj?:Image_Metadata):Image_Metadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Image_Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

width():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

height():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

format():string|null
format(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
format(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startImage_Metadata(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addWidth(builder:flatbuffers.Builder, width:bigint) {
  builder.addFieldInt64(0, width, BigInt('0'));
}

static addHeight(builder:flatbuffers.Builder, height:bigint) {
  builder.addFieldInt64(1, height, BigInt('0'));
}

static addFormat(builder:flatbuffers.Builder, formatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, formatOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(3, createdAt, BigInt('0'));
}

static endImage_Metadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createImage_Metadata(builder:flatbuffers.Builder, width:bigint, height:bigint, formatOffset:flatbuffers.Offset, createdAt:bigint):flatbuffers.Offset {
  Image_Metadata.startImage_Metadata(builder);
  Image_Metadata.addWidth(builder, width);
  Image_Metadata.addHeight(builder, height);
  Image_Metadata.addFormat(builder, formatOffset);
  Image_Metadata.addCreatedAt(builder, createdAt);
  return Image_Metadata.endImage_Metadata(builder);
}
}
