// @generated
// Automatically generated. Don't change this file manually.
// Name: schema.ts


// @ts-nocheck
// This file is generated by @zgdb/zg. Do not edit it manually.
// TODO: Generate based on the user's config
import { ZgDatabase, ZgBaseNode, ZgAuthContext, EntityCollection } from '@zgdb/client';
import { Builder, ByteBuffer } from 'flatbuffers';
import * as UserFB from './schema/user.js';
import * as PostFB from './schema/post.js';
import * as CommentFB from './schema/comment.js';
import * as FollowFB from './schema/follow.js';
import * as Image_MetadataFB from './schema/image-metadata.js';
import * as ImageFB from './schema/image.js';
import * as ReactionFB from './schema/reaction.js';
import * as TagFB from './schema/tag.js';
import * as PostTagFB from './schema/post-tag.js';


// --- Interfaces ---
export interface IUser {
  id: string;
  publicKey: string;
  displayName: string;
  avatarUrl: string;
}

export interface IPost {
  id: string;
  title: string;
  content: string;
  authorId: string;
  createdAt: bigint;
}

export interface IComment {
  id: string;
  content: string;
  authorId: string;
  postId: string;
  createdAt: bigint;
}

export interface IFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: bigint;
}

export interface IImage_Metadata {
  width: bigint;
  height: bigint;
  format: string;
  createdAt: bigint;
}

export interface IImage {
  id: string;
  url: string;
  fartCount: bigint;
  altText: string;
  metadata: any;
  postId: string;
  userId: string;
}

export interface IReaction {
  id: string;
  type: string;
  authorId: string;
  targetId: string;
  targetType: string;
}

export interface ITag {
  id: string;
  name: string;
}

export interface IPostTag {
  id: string;
  postId: string;
  tagId: string;
}

// --- Create Input Types ---
export type CreateUserInput = { publicKey: string, displayName: string, avatarUrl: string };
export type CreatePostInput = { title: string, content: string, authorId: string, createdAt: bigint };
export type CreateCommentInput = { content: string, authorId: string, postId: string, createdAt: bigint };
export type CreateFollowInput = { followerId: string, followingId: string, createdAt: bigint };
export type CreateImage_MetadataInput = { width: bigint, height: bigint, format: string, createdAt: bigint };
export type CreateImageInput = { url: string, fartCount: bigint, altText: string, metadata: any, postId: string, userId: string };
export type CreateReactionInput = { type: string, authorId: string, targetId: string, targetType: string };
export type CreateTagInput = { name: string };
export type CreatePostTagInput = { postId: string, tagId: string };

// --- Node Classes ---
export class UserNode<TActor> extends ZgBaseNode<UserFB.User, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: UserFB.User,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['User'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'publicKey', 'displayName', 'avatarUrl']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { avatarUrl: (prop === 'avatarUrl') ? value : target.fbb.avatarUrl(), displayName: (prop === 'displayName') ? value : target.fbb.displayName(), id: (prop === 'id') ? value : target.fbb.id(), publicKey: (prop === 'publicKey') ? value : target.fbb.publicKey() };
        
    const avatarUrlOffset = data.avatarUrl ? builder.createString(data.avatarUrl) : 0;
    const displayNameOffset = data.displayName ? builder.createString(data.displayName) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const publicKeyOffset = data.publicKey ? builder.createString(data.publicKey) : 0;
        
        const entityOffset = UserFB.User.createUser(builder, avatarUrlOffset, displayNameOffset, idOffset, publicKeyOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'User',
          target.id,
          buffer
        );
        
        const newFbb = UserFB.User.getRootAsUser(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get publicKey(): string | null {
    return this.fbb.publicKey();
  }

  get displayName(): string | null {
    return this.fbb.displayName();
  }

  get avatarUrl(): string | null {
    return this.fbb.avatarUrl();
  }

  // --- Relationships ---
  get posts(): PostNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.posts);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.authorId();
      return fkValue === this.id;
    });
  }

  get comments(): CommentNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.comments);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.authorId();
      return fkValue === this.id;
    });
  }

  get reactions(): ReactionNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.reactions);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.authorId();
      return fkValue === this.id;
    });
  }

  get following(): FollowNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.follows);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.followerId();
      return fkValue === this.id;
    });
  }

  get followers(): FollowNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.follows);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.followingId();
      return fkValue === this.id;
    });
  }
}

export class PostNode<TActor> extends ZgBaseNode<PostFB.Post, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: PostFB.Post,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Post'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'title', 'content', 'authorId', 'createdAt']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { authorId: (prop === 'authorId') ? value : target.fbb.authorId(), content: (prop === 'content') ? value : target.fbb.content(), createdAt: (prop === 'createdAt') ? value : target.fbb.createdAt(), id: (prop === 'id') ? value : target.fbb.id(), title: (prop === 'title') ? value : target.fbb.title() };
        
    const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const contentOffset = data.content ? builder.createString(data.content) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const titleOffset = data.title ? builder.createString(data.title) : 0;
        
        const entityOffset = PostFB.Post.createPost(builder, authorIdOffset, contentOffset, data.createdAt, idOffset, titleOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Post',
          target.id,
          buffer
        );
        
        const newFbb = PostFB.Post.getRootAsPost(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get title(): string | null {
    return this.fbb.title();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  get author(): UserNode<TActor> | null {
    const id = this.fbb.authorId();
    if (!id) return null;
    return this.db.get(
      'User',
       id,
       (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }

  get comments(): CommentNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.comments);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.postId();
      return fkValue === this.id;
    });
  }

  get images(): ImageNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.images);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.postId();
      return fkValue === this.id;
    });
  }

  get reactions(): ReactionNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.reactions);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.targetId();
      return fkValue === this.id;
    });
  }
}

export class CommentNode<TActor> extends ZgBaseNode<CommentFB.Comment, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: CommentFB.Comment,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Comment'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'content', 'authorId', 'postId', 'createdAt']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { authorId: (prop === 'authorId') ? value : target.fbb.authorId(), content: (prop === 'content') ? value : target.fbb.content(), createdAt: (prop === 'createdAt') ? value : target.fbb.createdAt(), id: (prop === 'id') ? value : target.fbb.id(), postId: (prop === 'postId') ? value : target.fbb.postId() };
        
    const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const contentOffset = data.content ? builder.createString(data.content) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
        
        const entityOffset = CommentFB.Comment.createComment(builder, authorIdOffset, contentOffset, data.createdAt, idOffset, postIdOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Comment',
          target.id,
          buffer
        );
        
        const newFbb = CommentFB.Comment.getRootAsComment(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  get author(): UserNode<TActor> | null {
    const id = this.fbb.authorId();
    if (!id) return null;
    return this.db.get(
      'User',
       id,
       (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }

  get post(): PostNode<TActor> | null {
    const id = this.fbb.postId();
    if (!id) return null;
    return this.db.get(
      'Post',
       id,
       (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
       (bb) => PostFB.Post.getRootAsPost(bb),
       this.authContext
    ) as PostNode<TActor> | null;
  }

  get reactions(): ReactionNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.reactions);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.targetId();
      return fkValue === this.id;
    });
  }
}

export class FollowNode<TActor> extends ZgBaseNode<FollowFB.Follow, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: FollowFB.Follow,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Follow'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'followerId', 'followingId', 'createdAt']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { createdAt: (prop === 'createdAt') ? value : target.fbb.createdAt(), followerId: (prop === 'followerId') ? value : target.fbb.followerId(), followingId: (prop === 'followingId') ? value : target.fbb.followingId(), id: (prop === 'id') ? value : target.fbb.id() };
        
    const followerIdOffset = data.followerId ? builder.createString(data.followerId) : 0;
    const followingIdOffset = data.followingId ? builder.createString(data.followingId) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
        
        const entityOffset = FollowFB.Follow.createFollow(builder, data.createdAt, followerIdOffset, followingIdOffset, idOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Follow',
          target.id,
          buffer
        );
        
        const newFbb = FollowFB.Follow.getRootAsFollow(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get followerId(): string | null {
    return this.fbb.followerId();
  }

  get followingId(): string | null {
    return this.fbb.followingId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  get follower(): UserNode<TActor> | null {
    const id = this.fbb.followerId();
    if (!id) return null;
    return this.db.get(
      'User',
       id,
       (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }

  get following(): UserNode<TActor> | null {
    const id = this.fbb.followingId();
    if (!id) return null;
    return this.db.get(
      'User',
       id,
       (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }
}

export class Image_MetadataNode<TActor> extends ZgBaseNode<Image_MetadataFB.Image_Metadata, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: Image_MetadataFB.Image_Metadata,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Image_Metadata'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['width', 'height', 'format', 'createdAt']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { createdAt: (prop === 'createdAt') ? value : target.fbb.createdAt(), format: (prop === 'format') ? value : target.fbb.format(), height: (prop === 'height') ? value : target.fbb.height(), width: (prop === 'width') ? value : target.fbb.width() };
        
    const formatOffset = data.format ? builder.createString(data.format) : 0;
        
        const entityOffset = Image_MetadataFB.Image_Metadata.createImage_Metadata(builder, data.createdAt, formatOffset, data.height, data.width);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Image_Metadata',
          target.id,
          buffer
        );
        
        const newFbb = Image_MetadataFB.Image_Metadata.getRootAsImage_Metadata(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get width(): bigint {
    return this.fbb.width();
  }

  get height(): bigint {
    return this.fbb.height();
  }

  get format(): string | null {
    return this.fbb.format();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---

}

export class ImageNode<TActor> extends ZgBaseNode<ImageFB.Image, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: ImageFB.Image,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Image'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'url', 'fartCount', 'altText', 'metadata', 'postId', 'userId']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { altText: (prop === 'altText') ? value : target.fbb.altText(), fartCount: (prop === 'fartCount') ? value : target.fbb.fartCount(), id: (prop === 'id') ? value : target.fbb.id(), metadata: (prop === 'metadata') ? value : target.fbb.metadata(), postId: (prop === 'postId') ? value : target.fbb.postId(), url: (prop === 'url') ? value : target.fbb.url(), userId: (prop === 'userId') ? value : target.fbb.userId() };
        
    const altTextOffset = data.altText ? builder.createString(data.altText) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
    const urlOffset = data.url ? builder.createString(data.url) : 0;
    const userIdOffset = data.userId ? builder.createString(data.userId) : 0;
        
        const entityOffset = ImageFB.Image.createImage(builder, altTextOffset, data.fartCount, idOffset, data.metadata, postIdOffset, urlOffset, userIdOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Image',
          target.id,
          buffer
        );
        
        const newFbb = ImageFB.Image.getRootAsImage(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get url(): string | null {
    return this.fbb.url();
  }

  get fartCount(): bigint {
    return this.fbb.fartCount();
  }

  get altText(): string | null {
    return this.fbb.altText();
  }

  get metadata(): any {
    return this.fbb.metadata();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get userId(): string | null {
    return this.fbb.userId();
  }

  // --- Relationships ---
  get post(): PostNode<TActor> | null {
    const id = this.fbb.postId();
    if (!id) return null;
    return this.db.get(
      'Post',
       id,
       (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
       (bb) => PostFB.Post.getRootAsPost(bb),
       this.authContext
    ) as PostNode<TActor> | null;
  }

  get user(): UserNode<TActor> | null {
    const id = this.fbb.userId();
    if (!id) return null;
    return this.db.get(
      'User',
       id,
       (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }
}

export class ReactionNode<TActor> extends ZgBaseNode<ReactionFB.Reaction, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: ReactionFB.Reaction,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Reaction'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'type', 'authorId', 'targetId', 'targetType']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { authorId: (prop === 'authorId') ? value : target.fbb.authorId(), id: (prop === 'id') ? value : target.fbb.id(), targetId: (prop === 'targetId') ? value : target.fbb.targetId(), targetType: (prop === 'targetType') ? value : target.fbb.targetType(), type: (prop === 'type') ? value : target.fbb.type() };
        
    const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const targetIdOffset = data.targetId ? builder.createString(data.targetId) : 0;
    const targetTypeOffset = data.targetType ? builder.createString(data.targetType) : 0;
    const typeOffset = data.type ? builder.createString(data.type) : 0;
        
        const entityOffset = ReactionFB.Reaction.createReaction(builder, authorIdOffset, idOffset, targetIdOffset, targetTypeOffset, typeOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Reaction',
          target.id,
          buffer
        );
        
        const newFbb = ReactionFB.Reaction.getRootAsReaction(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get type(): string | null {
    return this.fbb.type();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get targetId(): string | null {
    return this.fbb.targetId();
  }

  get targetType(): string | null {
    return this.fbb.targetType();
  }

  // --- Relationships ---
  get author(): UserNode<TActor> | null {
    const id = this.fbb.authorId();
    if (!id) return null;
    return this.db.get(
      'User',
       id,
       (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }
}

export class TagNode<TActor> extends ZgBaseNode<TagFB.Tag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: TagFB.Tag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Tag'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'name']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { id: (prop === 'id') ? value : target.fbb.id(), name: (prop === 'name') ? value : target.fbb.name() };
        
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const nameOffset = data.name ? builder.createString(data.name) : 0;
        
        const entityOffset = TagFB.Tag.createTag(builder, idOffset, nameOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Tag',
          target.id,
          buffer
        );
        
        const newFbb = TagFB.Tag.getRootAsTag(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get name(): string | null {
    return this.fbb.name();
  }

  // --- Relationships ---

}

export class PostTagNode<TActor> extends ZgBaseNode<PostTagFB.PostTag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: PostTagFB.PostTag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['PostTag'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'postId', 'tagId']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { id: (prop === 'id') ? value : target.fbb.id(), postId: (prop === 'postId') ? value : target.fbb.postId(), tagId: (prop === 'tagId') ? value : target.fbb.tagId() };
        
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
    const tagIdOffset = data.tagId ? builder.createString(data.tagId) : 0;
        
        const entityOffset = PostTagFB.PostTag.createPostTag(builder, idOffset, postIdOffset, tagIdOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'PostTag',
          target.id,
          buffer
        );
        
        const newFbb = PostTagFB.PostTag.getRootAsPostTag(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get tagId(): string | null {
    return this.fbb.tagId();
  }

  // --- Relationships ---
  get post(): PostNode<TActor> | null {
    const id = this.fbb.postId();
    if (!id) return null;
    return this.db.get(
      'Post',
       id,
       (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
       (bb) => PostFB.Post.getRootAsPost(bb),
       this.authContext
    ) as PostNode<TActor> | null;
  }

  get tag(): TagNode<TActor> | null {
    const id = this.fbb.tagId();
    if (!id) return null;
    return this.db.get(
      'Tag',
       id,
       (db, fbb, ac) => new TagNode<TActor>(db, fbb, ac),
       (bb) => TagFB.Tag.getRootAsTag(bb),
       this.authContext
    ) as TagNode<TActor> | null;
  }
}

// --- Collection Classes ---
export class UserCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'User';
    }

    create(data: CreateUserInput): UserNode<TActor> {
      const builder = new Builder(1024);
      
          const avatarUrlOffset = data.avatarUrl ? builder.createString(data.avatarUrl) : 0;
    const displayNameOffset = data.displayName ? builder.createString(data.displayName) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const publicKeyOffset = data.publicKey ? builder.createString(data.publicKey) : 0;
      

      UserFB.User.startUser(builder);
      
      UserFB.User.addAvatarUrl(builder, avatarUrlOffset ?? 0);
    UserFB.User.addDisplayName(builder, displayNameOffset ?? 0);
    UserFB.User.addId(builder, idOffset ?? 0);
    UserFB.User.addPublicKey(builder, publicKeyOffset ?? 0);

      const entityOffset = UserFB.User.endUser(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = UserFB.User.getRootAsUser(new ByteBuffer(buffer));

      return new UserNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<UserNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = UserFB.User.getRootAsUser(new ByteBuffer(buffer));
        yield new UserNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class PostCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'Post';
    }

    create(data: CreatePostInput): PostNode<TActor> {
      const builder = new Builder(1024);
      
          const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const contentOffset = data.content ? builder.createString(data.content) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const titleOffset = data.title ? builder.createString(data.title) : 0;
      

      PostFB.Post.startPost(builder);
      
      PostFB.Post.addAuthorId(builder, authorIdOffset ?? 0);
    PostFB.Post.addContent(builder, contentOffset ?? 0);
    PostFB.Post.addCreatedAt(builder, data.createdAt ?? null);
    PostFB.Post.addId(builder, idOffset ?? 0);
    PostFB.Post.addTitle(builder, titleOffset ?? 0);

      const entityOffset = PostFB.Post.endPost(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = PostFB.Post.getRootAsPost(new ByteBuffer(buffer));

      return new PostNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<PostNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = PostFB.Post.getRootAsPost(new ByteBuffer(buffer));
        yield new PostNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class CommentCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'Comment';
    }

    create(data: CreateCommentInput): CommentNode<TActor> {
      const builder = new Builder(1024);
      
          const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const contentOffset = data.content ? builder.createString(data.content) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
      

      CommentFB.Comment.startComment(builder);
      
      CommentFB.Comment.addAuthorId(builder, authorIdOffset ?? 0);
    CommentFB.Comment.addContent(builder, contentOffset ?? 0);
    CommentFB.Comment.addCreatedAt(builder, data.createdAt ?? null);
    CommentFB.Comment.addId(builder, idOffset ?? 0);
    CommentFB.Comment.addPostId(builder, postIdOffset ?? 0);

      const entityOffset = CommentFB.Comment.endComment(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = CommentFB.Comment.getRootAsComment(new ByteBuffer(buffer));

      return new CommentNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<CommentNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = CommentFB.Comment.getRootAsComment(new ByteBuffer(buffer));
        yield new CommentNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class FollowCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'Follow';
    }

    create(data: CreateFollowInput): FollowNode<TActor> {
      const builder = new Builder(1024);
      
          const followerIdOffset = data.followerId ? builder.createString(data.followerId) : 0;
    const followingIdOffset = data.followingId ? builder.createString(data.followingId) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
      

      FollowFB.Follow.startFollow(builder);
      
      FollowFB.Follow.addCreatedAt(builder, data.createdAt ?? null);
    FollowFB.Follow.addFollowerId(builder, followerIdOffset ?? 0);
    FollowFB.Follow.addFollowingId(builder, followingIdOffset ?? 0);
    FollowFB.Follow.addId(builder, idOffset ?? 0);

      const entityOffset = FollowFB.Follow.endFollow(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = FollowFB.Follow.getRootAsFollow(new ByteBuffer(buffer));

      return new FollowNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<FollowNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = FollowFB.Follow.getRootAsFollow(new ByteBuffer(buffer));
        yield new FollowNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class Image_MetadataCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'Image_Metadata';
    }

    create(data: CreateImage_MetadataInput): Image_MetadataNode<TActor> {
      const builder = new Builder(1024);
      
          const formatOffset = data.format ? builder.createString(data.format) : 0;
      

      Image_MetadataFB.Image_Metadata.startImage_Metadata(builder);
      
      Image_MetadataFB.Image_Metadata.addCreatedAt(builder, data.createdAt ?? null);
    Image_MetadataFB.Image_Metadata.addFormat(builder, formatOffset ?? 0);
    Image_MetadataFB.Image_Metadata.addHeight(builder, data.height ?? null);
    Image_MetadataFB.Image_Metadata.addWidth(builder, data.width ?? null);

      const entityOffset = Image_MetadataFB.Image_Metadata.endImage_Metadata(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = Image_MetadataFB.Image_Metadata.getRootAsImage_Metadata(new ByteBuffer(buffer));

      return new Image_MetadataNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<Image_MetadataNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = Image_MetadataFB.Image_Metadata.getRootAsImage_Metadata(new ByteBuffer(buffer));
        yield new Image_MetadataNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class ImageCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'Image';
    }

    create(data: CreateImageInput): ImageNode<TActor> {
      const builder = new Builder(1024);
      
          const altTextOffset = data.altText ? builder.createString(data.altText) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
    const urlOffset = data.url ? builder.createString(data.url) : 0;
    const userIdOffset = data.userId ? builder.createString(data.userId) : 0;
      

      ImageFB.Image.startImage(builder);
      
      ImageFB.Image.addAltText(builder, altTextOffset ?? 0);
    ImageFB.Image.addFartCount(builder, data.fartCount ?? null);
    ImageFB.Image.addId(builder, idOffset ?? 0);
    ImageFB.Image.addMetadata(builder, data.metadata ?? null);
    ImageFB.Image.addPostId(builder, postIdOffset ?? 0);
    ImageFB.Image.addUrl(builder, urlOffset ?? 0);
    ImageFB.Image.addUserId(builder, userIdOffset ?? 0);

      const entityOffset = ImageFB.Image.endImage(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = ImageFB.Image.getRootAsImage(new ByteBuffer(buffer));

      return new ImageNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<ImageNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = ImageFB.Image.getRootAsImage(new ByteBuffer(buffer));
        yield new ImageNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class ReactionCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'Reaction';
    }

    create(data: CreateReactionInput): ReactionNode<TActor> {
      const builder = new Builder(1024);
      
          const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const targetIdOffset = data.targetId ? builder.createString(data.targetId) : 0;
    const targetTypeOffset = data.targetType ? builder.createString(data.targetType) : 0;
    const typeOffset = data.type ? builder.createString(data.type) : 0;
      

      ReactionFB.Reaction.startReaction(builder);
      
      ReactionFB.Reaction.addAuthorId(builder, authorIdOffset ?? 0);
    ReactionFB.Reaction.addId(builder, idOffset ?? 0);
    ReactionFB.Reaction.addTargetId(builder, targetIdOffset ?? 0);
    ReactionFB.Reaction.addTargetType(builder, targetTypeOffset ?? 0);
    ReactionFB.Reaction.addType(builder, typeOffset ?? 0);

      const entityOffset = ReactionFB.Reaction.endReaction(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = ReactionFB.Reaction.getRootAsReaction(new ByteBuffer(buffer));

      return new ReactionNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<ReactionNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = ReactionFB.Reaction.getRootAsReaction(new ByteBuffer(buffer));
        yield new ReactionNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class TagCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'Tag';
    }

    create(data: CreateTagInput): TagNode<TActor> {
      const builder = new Builder(1024);
      
          const idOffset = data.id ? builder.createString(data.id) : 0;
    const nameOffset = data.name ? builder.createString(data.name) : 0;
      

      TagFB.Tag.startTag(builder);
      
      TagFB.Tag.addId(builder, idOffset ?? 0);
    TagFB.Tag.addName(builder, nameOffset ?? 0);

      const entityOffset = TagFB.Tag.endTag(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = TagFB.Tag.getRootAsTag(new ByteBuffer(buffer));

      return new TagNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<TagNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = TagFB.Tag.getRootAsTag(new ByteBuffer(buffer));
        yield new TagNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class PostTagCollection<TActor> {
    constructor(
      private db: ZgDatabase,
      private authContext: ZgAuthContext<TActor> | null
    ) {}

    get collectionName(): string {
      return 'PostTag';
    }

    create(data: CreatePostTagInput): PostTagNode<TActor> {
      const builder = new Builder(1024);
      
          const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
    const tagIdOffset = data.tagId ? builder.createString(data.tagId) : 0;
      

      PostTagFB.PostTag.startPostTag(builder);
      
      PostTagFB.PostTag.addId(builder, idOffset ?? 0);
    PostTagFB.PostTag.addPostId(builder, postIdOffset ?? 0);
    PostTagFB.PostTag.addTagId(builder, tagIdOffset ?? 0);

      const entityOffset = PostTagFB.PostTag.endPostTag(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this.db.insert(this.collectionName, data.id, buffer);

      const fbb = PostTagFB.PostTag.getRootAsPostTag(new ByteBuffer(buffer));

      return new PostTagNode<TActor>(
        this.db,
        fbb,
        this.authContext,
      );
    }

    *[Symbol.iterator](): Generator<PostTagNode<TActor>> {
      for (const [id, buffer] of this.db.scan(this.collectionName)) {
        const fbb = PostTagFB.PostTag.getRootAsPostTag(new ByteBuffer(buffer));
        yield new PostTagNode<TActor>(
          this.db,
          fbb,
          this.authContext,
        );
      }
    }
  }

export class ZgClient<TActor> extends ZgDatabase {
  public readonly users: UserCollection<TActor>;
  public readonly posts: PostCollection<TActor>;
  public readonly comments: CommentCollection<TActor>;
  public readonly follows: FollowCollection<TActor>;
  public readonly image_Metadatas: Image_MetadataCollection<TActor>;
  public readonly images: ImageCollection<TActor>;
  public readonly reactions: ReactionCollection<TActor>;
  public readonly tags: TagCollection<TActor>;
  public readonly postTags: PostTagCollection<TActor>;
  constructor(
    prollyTree: ProllyTree,
    config: ZgConfig<TActor> = { entityResolvers: {}, globalResolvers: {} },
    authContext: ZgAuthContext<TActor> | null = null,
  ) {
    super(prollyTree, config, authContext);
    this.users = new UserCollection<TActor>(this, this.authContext);
    this.posts = new PostCollection<TActor>(this, this.authContext);
    this.comments = new CommentCollection<TActor>(this, this.authContext);
    this.follows = new FollowCollection<TActor>(this, this.authContext);
    this.image_Metadatas = new Image_MetadataCollection<TActor>(this, this.authContext);
    this.images = new ImageCollection<TActor>(this, this.authContext);
    this.reactions = new ReactionCollection<TActor>(this, this.authContext);
    this.tags = new TagCollection<TActor>(this, this.authContext);
    this.postTags = new PostTagCollection<TActor>(this, this.authContext);
  }

  public with<TActor>(actor: TActor): ZgClient<TActor> {
    return new ZgClient<TActor>(this.prollyTree, this.config, { actor });
  }
}