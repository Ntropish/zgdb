// @generated
// Automatically generated. Don't change this file manually.
// Name: createDB.ts


// @ts-nocheck
// This file is generated by @zgdb/zg. Do not edit it manually.
// TODO: Generate based on the user's config
import { ZgDatabase, ZgBaseNode, ZgAuthContext, EntityCollection, ZgTransaction, NodeSchema } from '@zgdb/client';
import { Builder, ByteBuffer } from 'flatbuffers';
import * as UserFB from './schema/user.js';
import * as PostFB from './schema/post.js';
import * as CommentFB from './schema/comment.js';
import * as FollowFB from './schema/follow.js';
import * as Image_MetadataFB from './schema/image-metadata.js';
import * as ImageFB from './schema/image.js';
import * as ReactionFB from './schema/reaction.js';
import * as TagFB from './schema/tag.js';
import * as PostTagFB from './schema/post-tag.js';


// --- Interfaces ---
export interface IUser {
  id: string;
  publicKey: string;
  displayName: string;
  avatarUrl: string;
}

export interface IPost {
  id: string;
  title: string;
  content: string;
  authorId: string;
  createdAt: bigint;
}

export interface IComment {
  id: string;
  content: string;
  authorId: string;
  postId: string;
  createdAt: bigint;
}

export interface IFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: bigint;
}

export interface IImage_Metadata {
  width: bigint;
  height: bigint;
  format: string;
  createdAt: bigint;
}

export interface IImage {
  id: string;
  url: string;
  fartCount: bigint;
  altText: string;
  metadata: any;
  postId: string;
  userId: string;
}

export interface IReaction {
  id: string;
  type: string;
  authorId: string;
  targetId: string;
  targetType: string;
}

export interface ITag {
  id: string;
  name: string;
}

export interface IPostTag {
  id: string;
  postId: string;
  tagId: string;
}

// --- Create Input Types ---
export type CreateUserInput = { publicKey: string, displayName: string, avatarUrl: string };
export type CreatePostInput = { title: string, content: string, authorId: string, createdAt: bigint };
export type CreateCommentInput = { content: string, authorId: string, postId: string, createdAt: bigint };
export type CreateFollowInput = { followerId: string, followingId: string, createdAt: bigint };
export type CreateImage_MetadataInput = { width: bigint, height: bigint, format: string, createdAt: bigint };
export type CreateImageInput = { url: string, fartCount: bigint, altText: string, metadata: any, postId: string, userId: string };
export type CreateReactionInput = { type: string, authorId: string, targetId: string, targetType: string };
export type CreateTagInput = { name: string };
export type CreatePostTagInput = { postId: string, tagId: string };

// --- Node Classes ---

const UserSchema: NodeSchema = {
  name: 'User',
  fields: ['id', 'publicKey', 'displayName', 'avatarUrl'],
  create: (builder, data) => {
      const avatarUrlOffset = data.avatarUrl ? builder.createString(data.avatarUrl) : 0;
      const displayNameOffset = data.displayName ? builder.createString(data.displayName) : 0;
      const idOffset = data.id ? builder.createString(data.id) : 0;
      const publicKeyOffset = data.publicKey ? builder.createString(data.publicKey) : 0;
      return UserFB.User.createUser(builder, avatarUrlOffset, displayNameOffset, idOffset, publicKeyOffset);
  },
  getRootAs: (bb) => UserFB.User.getRootAsUser(bb),
};

export class UserNode<TActor> extends ZgBaseNode<UserFB.User, TActor> implements IUser {
  constructor(
    tx: ZgTransaction,
    fbb: UserFB.User,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, UserSchema, authContext);
  }

  // --- Relationships ---
  get posts(): PostNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.posts);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.authorId();
      return fkValue === this.id;
    });
  }

  get comments(): CommentNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.comments);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.authorId();
      return fkValue === this.id;
    });
  }

  get reactions(): ReactionNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.reactions);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.authorId();
      return fkValue === this.id;
    });
  }

  get following(): FollowNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.follows);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.followerId();
      return fkValue === this.id;
    });
  }

  get followers(): FollowNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.follows);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.followingId();
      return fkValue === this.id;
    });
  }
}


const PostSchema: NodeSchema = {
  name: 'Post',
  fields: ['id', 'title', 'content', 'authorId', 'createdAt'],
  create: (builder, data) => {
      const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
      const contentOffset = data.content ? builder.createString(data.content) : 0;
      const idOffset = data.id ? builder.createString(data.id) : 0;
      const titleOffset = data.title ? builder.createString(data.title) : 0;
      return PostFB.Post.createPost(builder, authorIdOffset, contentOffset, data.createdAt, idOffset, titleOffset);
  },
  getRootAs: (bb) => PostFB.Post.getRootAsPost(bb),
};

export class PostNode<TActor> extends ZgBaseNode<PostFB.Post, TActor> implements IPost {
  constructor(
    tx: ZgTransaction,
    fbb: PostFB.Post,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, PostSchema, authContext);
  }

  // --- Relationships ---
  get author(): UserNode<TActor> | null {
    const id = this.fbb.authorId();
    if (!id) return null;
    return this.tx.get(
      'User',
       id,
       (tx, fbb, ac) => new UserNode<TActor>(tx, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }

  get comments(): CommentNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.comments);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.postId();
      return fkValue === this.id;
    });
  }

  get images(): ImageNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.images);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.postId();
      return fkValue === this.id;
    });
  }

  get reactions(): ReactionNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.reactions);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.targetId();
      return fkValue === this.id;
    });
  }
}


const CommentSchema: NodeSchema = {
  name: 'Comment',
  fields: ['id', 'content', 'authorId', 'postId', 'createdAt'],
  create: (builder, data) => {
      const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
      const contentOffset = data.content ? builder.createString(data.content) : 0;
      const idOffset = data.id ? builder.createString(data.id) : 0;
      const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
      return CommentFB.Comment.createComment(builder, authorIdOffset, contentOffset, data.createdAt, idOffset, postIdOffset);
  },
  getRootAs: (bb) => CommentFB.Comment.getRootAsComment(bb),
};

export class CommentNode<TActor> extends ZgBaseNode<CommentFB.Comment, TActor> implements IComment {
  constructor(
    tx: ZgTransaction,
    fbb: CommentFB.Comment,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, CommentSchema, authContext);
  }

  // --- Relationships ---
  get author(): UserNode<TActor> | null {
    const id = this.fbb.authorId();
    if (!id) return null;
    return this.tx.get(
      'User',
       id,
       (tx, fbb, ac) => new UserNode<TActor>(tx, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }

  get post(): PostNode<TActor> | null {
    const id = this.fbb.postId();
    if (!id) return null;
    return this.tx.get(
      'Post',
       id,
       (tx, fbb, ac) => new PostNode<TActor>(tx, fbb, ac),
       (bb) => PostFB.Post.getRootAsPost(bb),
       this.authContext
    ) as PostNode<TActor> | null;
  }

  get reactions(): ReactionNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.tx.reactions);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.targetId();
      return fkValue === this.id;
    });
  }
}


const FollowSchema: NodeSchema = {
  name: 'Follow',
  fields: ['id', 'followerId', 'followingId', 'createdAt'],
  create: (builder, data) => {
      const followerIdOffset = data.followerId ? builder.createString(data.followerId) : 0;
      const followingIdOffset = data.followingId ? builder.createString(data.followingId) : 0;
      const idOffset = data.id ? builder.createString(data.id) : 0;
      return FollowFB.Follow.createFollow(builder, data.createdAt, followerIdOffset, followingIdOffset, idOffset);
  },
  getRootAs: (bb) => FollowFB.Follow.getRootAsFollow(bb),
};

export class FollowNode<TActor> extends ZgBaseNode<FollowFB.Follow, TActor> implements IFollow {
  constructor(
    tx: ZgTransaction,
    fbb: FollowFB.Follow,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, FollowSchema, authContext);
  }

  // --- Relationships ---
  get follower(): UserNode<TActor> | null {
    const id = this.fbb.followerId();
    if (!id) return null;
    return this.tx.get(
      'User',
       id,
       (tx, fbb, ac) => new UserNode<TActor>(tx, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }

  get following(): UserNode<TActor> | null {
    const id = this.fbb.followingId();
    if (!id) return null;
    return this.tx.get(
      'User',
       id,
       (tx, fbb, ac) => new UserNode<TActor>(tx, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }
}


const Image_MetadataSchema: NodeSchema = {
  name: 'Image_Metadata',
  fields: ['width', 'height', 'format', 'createdAt'],
  create: (builder, data) => {
      const formatOffset = data.format ? builder.createString(data.format) : 0;
      return Image_MetadataFB.Image_Metadata.createImage_Metadata(builder, data.createdAt, formatOffset, data.height, data.width);
  },
  getRootAs: (bb) => Image_MetadataFB.Image_Metadata.getRootAsImage_Metadata(bb),
};

export class Image_MetadataNode<TActor> extends ZgBaseNode<Image_MetadataFB.Image_Metadata, TActor> implements IImage_Metadata {
  constructor(
    tx: ZgTransaction,
    fbb: Image_MetadataFB.Image_Metadata,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, Image_MetadataSchema, authContext);
  }

  // --- Relationships ---

}


const ImageSchema: NodeSchema = {
  name: 'Image',
  fields: ['id', 'url', 'fartCount', 'altText', 'metadata', 'postId', 'userId'],
  create: (builder, data) => {
      const altTextOffset = data.altText ? builder.createString(data.altText) : 0;
      const idOffset = data.id ? builder.createString(data.id) : 0;
      const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
      const urlOffset = data.url ? builder.createString(data.url) : 0;
      const userIdOffset = data.userId ? builder.createString(data.userId) : 0;
      return ImageFB.Image.createImage(builder, altTextOffset, data.fartCount, idOffset, data.metadata, postIdOffset, urlOffset, userIdOffset);
  },
  getRootAs: (bb) => ImageFB.Image.getRootAsImage(bb),
};

export class ImageNode<TActor> extends ZgBaseNode<ImageFB.Image, TActor> implements IImage {
  constructor(
    tx: ZgTransaction,
    fbb: ImageFB.Image,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, ImageSchema, authContext);
  }

  // --- Relationships ---
  get post(): PostNode<TActor> | null {
    const id = this.fbb.postId();
    if (!id) return null;
    return this.tx.get(
      'Post',
       id,
       (tx, fbb, ac) => new PostNode<TActor>(tx, fbb, ac),
       (bb) => PostFB.Post.getRootAsPost(bb),
       this.authContext
    ) as PostNode<TActor> | null;
  }

  get user(): UserNode<TActor> | null {
    const id = this.fbb.userId();
    if (!id) return null;
    return this.tx.get(
      'User',
       id,
       (tx, fbb, ac) => new UserNode<TActor>(tx, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }
}


const ReactionSchema: NodeSchema = {
  name: 'Reaction',
  fields: ['id', 'type', 'authorId', 'targetId', 'targetType'],
  create: (builder, data) => {
      const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
      const idOffset = data.id ? builder.createString(data.id) : 0;
      const targetIdOffset = data.targetId ? builder.createString(data.targetId) : 0;
      const targetTypeOffset = data.targetType ? builder.createString(data.targetType) : 0;
      const typeOffset = data.type ? builder.createString(data.type) : 0;
      return ReactionFB.Reaction.createReaction(builder, authorIdOffset, idOffset, targetIdOffset, targetTypeOffset, typeOffset);
  },
  getRootAs: (bb) => ReactionFB.Reaction.getRootAsReaction(bb),
};

export class ReactionNode<TActor> extends ZgBaseNode<ReactionFB.Reaction, TActor> implements IReaction {
  constructor(
    tx: ZgTransaction,
    fbb: ReactionFB.Reaction,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, ReactionSchema, authContext);
  }

  // --- Relationships ---
  get author(): UserNode<TActor> | null {
    const id = this.fbb.authorId();
    if (!id) return null;
    return this.tx.get(
      'User',
       id,
       (tx, fbb, ac) => new UserNode<TActor>(tx, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }
}


const TagSchema: NodeSchema = {
  name: 'Tag',
  fields: ['id', 'name'],
  create: (builder, data) => {
      const idOffset = data.id ? builder.createString(data.id) : 0;
      const nameOffset = data.name ? builder.createString(data.name) : 0;
      return TagFB.Tag.createTag(builder, idOffset, nameOffset);
  },
  getRootAs: (bb) => TagFB.Tag.getRootAsTag(bb),
};

export class TagNode<TActor> extends ZgBaseNode<TagFB.Tag, TActor> implements ITag {
  constructor(
    tx: ZgTransaction,
    fbb: TagFB.Tag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, TagSchema, authContext);
  }

  // --- Relationships ---

}


const PostTagSchema: NodeSchema = {
  name: 'PostTag',
  fields: ['id', 'postId', 'tagId'],
  create: (builder, data) => {
      const idOffset = data.id ? builder.createString(data.id) : 0;
      const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
      const tagIdOffset = data.tagId ? builder.createString(data.tagId) : 0;
      return PostTagFB.PostTag.createPostTag(builder, idOffset, postIdOffset, tagIdOffset);
  },
  getRootAs: (bb) => PostTagFB.PostTag.getRootAsPostTag(bb),
};

export class PostTagNode<TActor> extends ZgBaseNode<PostTagFB.PostTag, TActor> implements IPostTag {
  constructor(
    tx: ZgTransaction,
    fbb: PostTagFB.PostTag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, PostTagSchema, authContext);
  }

  // --- Relationships ---
  get post(): PostNode<TActor> | null {
    const id = this.fbb.postId();
    if (!id) return null;
    return this.tx.get(
      'Post',
       id,
       (tx, fbb, ac) => new PostNode<TActor>(tx, fbb, ac),
       (bb) => PostFB.Post.getRootAsPost(bb),
       this.authContext
    ) as PostNode<TActor> | null;
  }

  get tag(): TagNode<TActor> | null {
    const id = this.fbb.tagId();
    if (!id) return null;
    return this.tx.get(
      'Tag',
       id,
       (tx, fbb, ac) => new TagNode<TActor>(tx, fbb, ac),
       (bb) => TagFB.Tag.getRootAsTag(bb),
       this.authContext
    ) as TagNode<TActor> | null;
  }
}

// --- Collection Classes ---
export class UserCollection<TActor> extends EntityCollection<UserFB.User, UserNode<TActor>> {
    add(data: UserCreateInput): UserNode<TActor> {
      const builder = new Builder(1024);
      
          const avatarUrlOffset = data.avatarUrl ? builder.createString(data.avatarUrl) : 0;
    const displayNameOffset = data.displayName ? builder.createString(data.displayName) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const publicKeyOffset = data.publicKey ? builder.createString(data.publicKey) : 0;
      
      

      UserFB.User.startUser(builder);
      
      UserFB.User.addAvatarUrl(builder, avatarUrlOffset);
    UserFB.User.addDisplayName(builder, displayNameOffset);
    UserFB.User.addId(builder, idOffset);
    UserFB.User.addPublicKey(builder, publicKeyOffset);

      const entityOffset = UserFB.User.endUser(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('User', data.id, buffer);

      const fbb = UserFB.User.getRootAsUser(new ByteBuffer(buffer));

      return new UserNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class PostCollection<TActor> extends EntityCollection<PostFB.Post, PostNode<TActor>> {
    add(data: PostCreateInput): PostNode<TActor> {
      const builder = new Builder(1024);
      
          const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const contentOffset = data.content ? builder.createString(data.content) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const titleOffset = data.title ? builder.createString(data.title) : 0;
      
      

      PostFB.Post.startPost(builder);
      
      PostFB.Post.addAuthorId(builder, authorIdOffset);
    PostFB.Post.addContent(builder, contentOffset);
    PostFB.Post.addCreatedAt(builder, data.createdAt);
    PostFB.Post.addId(builder, idOffset);
    PostFB.Post.addTitle(builder, titleOffset);

      const entityOffset = PostFB.Post.endPost(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('Post', data.id, buffer);

      const fbb = PostFB.Post.getRootAsPost(new ByteBuffer(buffer));

      return new PostNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class CommentCollection<TActor> extends EntityCollection<CommentFB.Comment, CommentNode<TActor>> {
    add(data: CommentCreateInput): CommentNode<TActor> {
      const builder = new Builder(1024);
      
          const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const contentOffset = data.content ? builder.createString(data.content) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
      
      

      CommentFB.Comment.startComment(builder);
      
      CommentFB.Comment.addAuthorId(builder, authorIdOffset);
    CommentFB.Comment.addContent(builder, contentOffset);
    CommentFB.Comment.addCreatedAt(builder, data.createdAt);
    CommentFB.Comment.addId(builder, idOffset);
    CommentFB.Comment.addPostId(builder, postIdOffset);

      const entityOffset = CommentFB.Comment.endComment(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('Comment', data.id, buffer);

      const fbb = CommentFB.Comment.getRootAsComment(new ByteBuffer(buffer));

      return new CommentNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class FollowCollection<TActor> extends EntityCollection<FollowFB.Follow, FollowNode<TActor>> {
    add(data: FollowCreateInput): FollowNode<TActor> {
      const builder = new Builder(1024);
      
          const followerIdOffset = data.followerId ? builder.createString(data.followerId) : 0;
    const followingIdOffset = data.followingId ? builder.createString(data.followingId) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
      
      

      FollowFB.Follow.startFollow(builder);
      
      FollowFB.Follow.addCreatedAt(builder, data.createdAt);
    FollowFB.Follow.addFollowerId(builder, followerIdOffset);
    FollowFB.Follow.addFollowingId(builder, followingIdOffset);
    FollowFB.Follow.addId(builder, idOffset);

      const entityOffset = FollowFB.Follow.endFollow(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('Follow', data.id, buffer);

      const fbb = FollowFB.Follow.getRootAsFollow(new ByteBuffer(buffer));

      return new FollowNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class Image_MetadataCollection<TActor> extends EntityCollection<Image_MetadataFB.Image_Metadata, Image_MetadataNode<TActor>> {
    add(data: Image_MetadataCreateInput): Image_MetadataNode<TActor> {
      const builder = new Builder(1024);
      
          const formatOffset = data.format ? builder.createString(data.format) : 0;
      
      

      Image_MetadataFB.Image_Metadata.startImage_Metadata(builder);
      
      Image_MetadataFB.Image_Metadata.addCreatedAt(builder, data.createdAt);
    Image_MetadataFB.Image_Metadata.addFormat(builder, formatOffset);
    Image_MetadataFB.Image_Metadata.addHeight(builder, data.height);
    Image_MetadataFB.Image_Metadata.addWidth(builder, data.width);

      const entityOffset = Image_MetadataFB.Image_Metadata.endImage_Metadata(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('Image_Metadata', data.id, buffer);

      const fbb = Image_MetadataFB.Image_Metadata.getRootAsImage_Metadata(new ByteBuffer(buffer));

      return new Image_MetadataNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class ImageCollection<TActor> extends EntityCollection<ImageFB.Image, ImageNode<TActor>> {
    add(data: ImageCreateInput): ImageNode<TActor> {
      const builder = new Builder(1024);
      
          const altTextOffset = data.altText ? builder.createString(data.altText) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
    const urlOffset = data.url ? builder.createString(data.url) : 0;
    const userIdOffset = data.userId ? builder.createString(data.userId) : 0;
      
      

      ImageFB.Image.startImage(builder);
      
      ImageFB.Image.addAltText(builder, altTextOffset);
    ImageFB.Image.addFartCount(builder, data.fartCount);
    ImageFB.Image.addId(builder, idOffset);
    ImageFB.Image.addMetadata(builder, data.metadata);
    ImageFB.Image.addPostId(builder, postIdOffset);
    ImageFB.Image.addUrl(builder, urlOffset);
    ImageFB.Image.addUserId(builder, userIdOffset);

      const entityOffset = ImageFB.Image.endImage(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('Image', data.id, buffer);

      const fbb = ImageFB.Image.getRootAsImage(new ByteBuffer(buffer));

      return new ImageNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class ReactionCollection<TActor> extends EntityCollection<ReactionFB.Reaction, ReactionNode<TActor>> {
    add(data: ReactionCreateInput): ReactionNode<TActor> {
      const builder = new Builder(1024);
      
          const authorIdOffset = data.authorId ? builder.createString(data.authorId) : 0;
    const idOffset = data.id ? builder.createString(data.id) : 0;
    const targetIdOffset = data.targetId ? builder.createString(data.targetId) : 0;
    const targetTypeOffset = data.targetType ? builder.createString(data.targetType) : 0;
    const typeOffset = data.type ? builder.createString(data.type) : 0;
      
      

      ReactionFB.Reaction.startReaction(builder);
      
      ReactionFB.Reaction.addAuthorId(builder, authorIdOffset);
    ReactionFB.Reaction.addId(builder, idOffset);
    ReactionFB.Reaction.addTargetId(builder, targetIdOffset);
    ReactionFB.Reaction.addTargetType(builder, targetTypeOffset);
    ReactionFB.Reaction.addType(builder, typeOffset);

      const entityOffset = ReactionFB.Reaction.endReaction(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('Reaction', data.id, buffer);

      const fbb = ReactionFB.Reaction.getRootAsReaction(new ByteBuffer(buffer));

      return new ReactionNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class TagCollection<TActor> extends EntityCollection<TagFB.Tag, TagNode<TActor>> {
    add(data: TagCreateInput): TagNode<TActor> {
      const builder = new Builder(1024);
      
          const idOffset = data.id ? builder.createString(data.id) : 0;
    const nameOffset = data.name ? builder.createString(data.name) : 0;
      
      

      TagFB.Tag.startTag(builder);
      
      TagFB.Tag.addId(builder, idOffset);
    TagFB.Tag.addName(builder, nameOffset);

      const entityOffset = TagFB.Tag.endTag(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('Tag', data.id, buffer);

      const fbb = TagFB.Tag.getRootAsTag(new ByteBuffer(buffer));

      return new TagNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }

export class PostTagCollection<TActor> extends EntityCollection<PostTagFB.PostTag, PostTagNode<TActor>> {
    add(data: PostTagCreateInput): PostTagNode<TActor> {
      const builder = new Builder(1024);
      
          const idOffset = data.id ? builder.createString(data.id) : 0;
    const postIdOffset = data.postId ? builder.createString(data.postId) : 0;
    const tagIdOffset = data.tagId ? builder.createString(data.tagId) : 0;
      
      

      PostTagFB.PostTag.startPostTag(builder);
      
      PostTagFB.PostTag.addId(builder, idOffset);
    PostTagFB.PostTag.addPostId(builder, postIdOffset);
    PostTagFB.PostTag.addTagId(builder, tagIdOffset);

      const entityOffset = PostTagFB.PostTag.endPostTag(builder);
      
      builder.finish(entityOffset);
      const buffer = builder.asUint8Array();

      this['tx'].put('PostTag', data.id, buffer);

      const fbb = PostTagFB.PostTag.getRootAsPostTag(new ByteBuffer(buffer));

      return new PostTagNode<TActor>(this['tx'], fbb, this['authContext']);
    }
  }


export class ZgTransactionWithCollections<TActor> extends ZgTransaction {
  public readonly users: UserCollection<TActor>;
  public readonly posts: PostCollection<TActor>;
  public readonly comments: CommentCollection<TActor>;
  public readonly follows: FollowCollection<TActor>;
  public readonly image_Metadatas: Image_MetadataCollection<TActor>;
  public readonly images: ImageCollection<TActor>;
  public readonly reactions: ReactionCollection<TActor>;
  public readonly tags: TagCollection<TActor>;
  public readonly postTags: PostTagCollection<TActor>;

  constructor(
    db: ZgDatabase,
    tree: ProllyTree,
    authContext: ZgAuthContext<TActor> | null,
  ) {
    super(db, tree, authContext);
    this.users = new UserCollection<TActor>(this, 'User', (tx, fbb, ac) => new UserNode<TActor>(tx, fbb, ac), (bb) => UserFB.User.getRootAsUser(bb), this.authContext);
    this.posts = new PostCollection<TActor>(this, 'Post', (tx, fbb, ac) => new PostNode<TActor>(tx, fbb, ac), (bb) => PostFB.Post.getRootAsPost(bb), this.authContext);
    this.comments = new CommentCollection<TActor>(this, 'Comment', (tx, fbb, ac) => new CommentNode<TActor>(tx, fbb, ac), (bb) => CommentFB.Comment.getRootAsComment(bb), this.authContext);
    this.follows = new FollowCollection<TActor>(this, 'Follow', (tx, fbb, ac) => new FollowNode<TActor>(tx, fbb, ac), (bb) => FollowFB.Follow.getRootAsFollow(bb), this.authContext);
    this.image_Metadatas = new Image_MetadataCollection<TActor>(this, 'Image_Metadata', (tx, fbb, ac) => new Image_MetadataNode<TActor>(tx, fbb, ac), (bb) => Image_MetadataFB.Image_Metadata.getRootAsImage_Metadata(bb), this.authContext);
    this.images = new ImageCollection<TActor>(this, 'Image', (tx, fbb, ac) => new ImageNode<TActor>(tx, fbb, ac), (bb) => ImageFB.Image.getRootAsImage(bb), this.authContext);
    this.reactions = new ReactionCollection<TActor>(this, 'Reaction', (tx, fbb, ac) => new ReactionNode<TActor>(tx, fbb, ac), (bb) => ReactionFB.Reaction.getRootAsReaction(bb), this.authContext);
    this.tags = new TagCollection<TActor>(this, 'Tag', (tx, fbb, ac) => new TagNode<TActor>(tx, fbb, ac), (bb) => TagFB.Tag.getRootAsTag(bb), this.authContext);
    this.postTags = new PostTagCollection<TActor>(this, 'PostTag', (tx, fbb, ac) => new PostTagNode<TActor>(tx, fbb, ac), (bb) => PostTagFB.PostTag.getRootAsPostTag(bb), this.authContext);
  }
}

export class ZgClient<TActor> {
  private db: ZgDatabase;

  private constructor(db: ZgDatabase) {
    this.db = db;
  }

  public static async create<TActor>(options?: any): Promise<ZgClient<TActor>> {
    const transactionFactory = (
      db: ZgDatabase,
      tree: ProllyTree,
      authContext: ZgAuthContext<TActor> | null
    ) => {
      return new ZgTransactionWithCollections<TActor>(db, tree, authContext);
    };
    const db = new ZgDatabase(options, transactionFactory);
    return new ZgClient(db);
  }

  public async createTransaction(options: {
    actor: TActor;
  }): Promise<ZgTransactionWithCollections<TActor>> {
    return (await this.db.createTransaction({
      actor: options.actor,
    })) as ZgTransactionWithCollections<TActor>;
  }
}

export async function createDB<TActor = any>(options?: any): Promise<ZgClient<TActor>> {
  return ZgClient.create<TActor>(options);
}
