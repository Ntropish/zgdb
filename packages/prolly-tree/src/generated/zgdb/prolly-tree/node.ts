// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { NodeBody, unionToNodeBody, unionListToNodeBody } from '../../zgdb/prolly-tree/node-body.js';


export class Node {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Node {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNode(bb:flatbuffers.ByteBuffer, obj?:Node):Node {
  return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNode(bb:flatbuffers.ByteBuffer, obj?:Node):Node {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

level():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

entryCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

bodyType():NodeBody {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : NodeBody.NONE;
}

body<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startNode(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLevel(builder:flatbuffers.Builder, level:number) {
  builder.addFieldInt32(0, level, 0);
}

static addEntryCount(builder:flatbuffers.Builder, entryCount:number) {
  builder.addFieldInt32(1, entryCount, 0);
}

static addBodyType(builder:flatbuffers.Builder, bodyType:NodeBody) {
  builder.addFieldInt8(2, bodyType, NodeBody.NONE);
}

static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, bodyOffset, 0);
}

static endNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishNodeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedNodeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createNode(builder:flatbuffers.Builder, level:number, entryCount:number, bodyType:NodeBody, bodyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Node.startNode(builder);
  Node.addLevel(builder, level);
  Node.addEntryCount(builder, entryCount);
  Node.addBodyType(builder, bodyType);
  Node.addBody(builder, bodyOffset);
  return Node.endNode(builder);
}
}
