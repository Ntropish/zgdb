// @generated
// Automatically generated. Don't change this file manually.
// Name: schema.ts



// --- Imports ---
import { 
  ZgClient, 
  ZgTransaction, 
  ZgBaseNode, 
  ZgDatabase, 
  ZgAuthContext,
  NodeSchema,
  ZgCollection 
} from '@zgdb/client';

import * as TestEntityFB from './schema/test_entity.js';


// --- Interfaces ---
export interface ITestEntity {
  id: string;
  value: bigint;
}

// --- Create Input Types ---
export type CreateTestEntityInput = { value: bigint };

// --- Node Classes ---

const TestEntitySchema: NodeSchema = {
  name: 'TestEntity',
  fields: ['id', 'value'],
  create: (builder, data) => {
      const idOffset = data.id ? builder.createString(data.id) : 0;
      return TestEntityFB.TestEntity.createTestEntity(builder, idOffset, data.value);
  },
  getRootAs: (bb) => TestEntityFB.TestEntity.getRootAsTestEntity(bb),
};

export class TestEntityNode<TActor> extends ZgBaseNode<
  TestEntityFB.TestEntity,
  ZgTransactionWithCollections<TActor>,
  TActor
> implements ITestEntity {
  public id: string;
  public value: bigint;

  constructor(
    tx: ZgTransaction,
    fbb: TestEntityFB.TestEntity,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(tx, fbb, TestEntitySchema, authContext);
  }

  // --- Relationships ---

}

// --- Collection Classes ---

export class TestEntityCollection<TActor> extends ZgCollection<TestEntityFB.TestEntity, TestEntityNode<TActor>> {
  add(data: CreateTestEntityInput & { id: string }): TestEntityNode<TActor> {
    const builder = new Builder(1024);
    const idOffset = data.id ? builder.createString(data.id) : 0;

    TestEntityFB.TestEntity.startTestEntity(builder);
    TestEntityFB.TestEntity.addId(builder, idOffset);
    TestEntityFB.TestEntity.addValue(builder, data.value);
    const entityOffset = TestEntityFB.TestEntity.endTestEntity(builder);

    builder.finish(entityOffset);
    const buffer = builder.asUint8Array();

    this['tx'].put('TestEntity', data.id, buffer);

    const fbb = TestEntityFB.TestEntity.getRootAsTestEntity(new ByteBuffer(buffer));

    return new TestEntityNode<TActor>(this['tx'], fbb, this['authContext']);
  }
}
  


export class ZgTransactionWithCollections<TActor> extends ZgTransaction {
  public readonly testEntitys: TestEntityCollection<TActor>;

  constructor(
    db: ZgDatabase,
    tree: any,
    authContext: ZgAuthContext<TActor> | null,
  ) {
    super(db, tree, authContext);
    this.testEntitys = new TestEntityCollection<TActor>(this, 'TestEntity', (tx, fbb, ac) => new TestEntityNode<TActor>(tx, fbb, ac), (bb) => TestEntityFB.TestEntity.getRootAsTestEntity(bb), this.authContext);
  }
}

export const DB = {
  Transaction: ZgTransactionWithCollections,
};
