// Generated by ZG. Do not edit.

import { ZgDatabase, ZgBaseNode, ZgAuthContext } from '@zg/client';
import * as LowLevel from './schema_generated.js';

// --- Interfaces ---
export interface ITestEntity {
  id: string;
  value: number;
}

// --- Node Classes ---
export class TestEntityNode extends ZgBaseNode<LowLevel.TestEntity> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get value(): number {
    return this.fbb.value();
  }

  // --- Relationships ---
  // (to be implemented)
}

// --- Database Class ---
export class ZgClient {
  private db: ZgDatabase;
  private authContext: ZgAuthContext | null = null;
  private localResolvers: Record<string, Record<string, Function>>;
  private globalResolvers: Record<string, Function>;

  constructor(config: any) {
    this.db = new ZgDatabase(config.db);
    this.globalResolvers = config.resolvers.global;
    this.localResolvers = config.resolvers.local;
  }

  setAuthContext(context: ZgAuthContext) {
    this.authContext = context;
  }

  get testEntitys() {
    return {
      get: async (id: string): Promise<TestEntityNode | null> => {
        const result = await this.db.get<LowLevel.TestEntity, TestEntityNode>('TestEntity', id, (db, fbb, ac) => new TestEntityNode(db, fbb, ac));
        // No 'read' auth rules defined for TestEntity
        return result;
      },
      create: async (data: Partial<ITestEntity>): Promise<TestEntityNode> => {
        // No 'create' auth rules defined for TestEntity
        return this.db.create<LowLevel.TestEntity, TestEntityNode>('TestEntity', data, (db, fbb, ac) => new TestEntityNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<ITestEntity>): Promise<TestEntityNode> => {
        // No 'update' auth rules defined for TestEntity
        return this.db.update<LowLevel.TestEntity, TestEntityNode>('TestEntity', id, data, (db, fbb, ac) => new TestEntityNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        // No 'delete' auth rules defined for TestEntity
        return this.db.delete('TestEntity', id);
      }
    };
  }
}

export function createZgClient(config: any): ZgClient {
  return new ZgClient(config);
}
