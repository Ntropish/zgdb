import { NormalizedSchema, Field } from "./parser/types";
import { topologicalSort } from "./topological-sort";

/**
 * Generates the FBS definition for a single field.
 * @param field - The normalized field object.
 * @returns A string representing the field in FBS format.
 */
function generateField(field: Field): string {
  // FlatBuffers doesn't have a concept of "required" for non-scalar types in the same way.
  // They are optional by default. The `required` keyword exists but has specific semantics
  // related to forward/backward compatibility and is often avoided.
  // We will simply define the field and its type.
  return `  ${field.name}: ${field.type};`;
}

/**
 * Generates the FBS definition for a full table from a normalized schema.
 * @param schema - The normalized schema object.
 * @returns A string representing the table in FBS format.
 */
function generateTable(schema: NormalizedSchema): string {
  const fields = schema.fields.map(generateField).join("\n");

  let manyToManyFields = "";
  if (schema.manyToMany && schema.manyToMany.length > 0) {
    const m2mComments = schema.manyToMany
      .map(
        (rel) =>
          `  // Many-to-many relationship: '${rel.name}' to node '${rel.node}' through '${rel.through}'`
      )
      .join("\n");
    manyToManyFields = `\n\n${m2mComments}`;
  }

  let tableString = "";

  if (schema.description) {
    // Use '///' for documentation comments that may be used by tooling.
    tableString += `/// ${schema.description}\n`;
  }

  tableString += `table ${schema.name} {\n${fields}${manyToManyFields}\n}`;

  return tableString;
}

/**
 * The main generator function that transforms a complete IR into a single
 * string representing a .fbs file.
 * @param schemas - An array of all normalized schemas, including nested ones.
 * @returns The content of the .fbs file as a string.
 */
export function generateFbs(schemas: NormalizedSchema[]): string {
  const fileHeader = `// Generated by ZG. Do not edit.\n\n`;

  const sortedSchemas = topologicalSort(schemas);
  const allTables = sortedSchemas.map(generateTable).join("\n\n");

  return fileHeader + allTables + "\n";
}
