// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`NodeClassGenerator > should generate correct node classes for a schema with relationships 1`] = `
"// --- Node Classes ---
export class UserNode<TActor> extends ZgBaseNode<UserFB.User, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: UserFB.User,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['User'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'name']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { id: (prop === 'id') ? value : target.fbb.id(), name: (prop === 'name') ? value : target.fbb.name() };
        
    const nameOffset = data.name ? builder.createString(data.name) : 0;
        
        const entityOffset = UserFB.User.createUser(builder, data.id, nameOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'User',
          target.id,
          buffer
        );
        
        const newFbb = UserFB.User.getRootAsUser(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): any {
    return this.fbb.id();
  }

  get name(): string | null {
    return this.fbb.name();
  }

  // --- Relationships ---
  get posts(): PostNode<TActor>[] {
    // This is a placeholder implementation. A real implementation would use an index.
    const allNodes = Array.from(this.db.posts);
    // TODO: This is inefficient. We should use an index.
    return allNodes.filter(n => {
      const remoteNode = n as any;
      const fkValue = remoteNode.fbb.authorId();
      return fkValue === this.id;
    });
  }
}

export class PostNode<TActor> extends ZgBaseNode<PostFB.Post, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: PostFB.Post,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['Post'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'title', 'authorId']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { id: (prop === 'id') ? value : target.fbb.id(), title: (prop === 'title') ? value : target.fbb.title(), authorId: (prop === 'authorId') ? value : target.fbb.authorId() };
        
    const titleOffset = data.title ? builder.createString(data.title) : 0;
        
        const entityOffset = PostFB.Post.createPost(builder, data.authorId, data.id, titleOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'Post',
          target.id,
          buffer
        );
        
        const newFbb = PostFB.Post.getRootAsPost(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): any {
    return this.fbb.id();
  }

  get title(): string | null {
    return this.fbb.title();
  }

  get authorId(): any {
    return this.fbb.authorId();
  }

  // --- Relationships ---
  get author(): UserNode<TActor> | null {
    const id = this.fbb.authorId();
    if (!id) return null;
    return this.db.get(
      'User',
       id,
       (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
       (bb) => UserFB.User.getRootAsUser(bb),
       this.authContext
    ) as UserNode<TActor> | null;
  }
}"
`;

exports[`NodeClassGenerator > should generate correct node classes for a simple schema 1`] = `
"// --- Node Classes ---
export class UserNode<TActor> extends ZgBaseNode<UserFB.User, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: UserFB.User,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
    
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        const entityResolvers = target.db.config.entityResolvers?.['User'] ?? {};
        if (prop in entityResolvers) {
          return entityResolvers[prop as keyof typeof entityResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        const globalResolvers = target.db.config.globalResolvers ?? {};
        if (prop in globalResolvers) {
          return globalResolvers[prop as keyof typeof globalResolvers]({ actor: target.authContext?.actor, db: target.db, node: target });
        }
        return Reflect.get(target, prop, receiver);
      },
      set: (target, prop, value, receiver) => {
        const schemaFields = new Set(['id', 'name', 'age']);
        if (!schemaFields.has(prop as string)) {
          return Reflect.set(target, prop, value, receiver);
        }

        const builder = new Builder(1024);
        const data = { id: (prop === 'id') ? value : target.fbb.id(), name: (prop === 'name') ? value : target.fbb.name(), age: (prop === 'age') ? value : target.fbb.age() };
        
    const nameOffset = data.name ? builder.createString(data.name) : 0;
        
        const entityOffset = UserFB.User.createUser(builder, data.age, data.id, nameOffset);
        builder.finish(entityOffset);
        const buffer = builder.asUint8Array();

        target.db.update(
          'User',
          target.id,
          buffer
        );
        
        const newFbb = UserFB.User.getRootAsUser(new ByteBuffer(buffer));
        target.fbb = newFbb;

        return true;
      }
    });
  }

  // --- Fields ---
  get id(): any {
    return this.fbb.id();
  }

  get name(): string | null {
    return this.fbb.name();
  }

  get age(): any {
    return this.fbb.age();
  }

  // --- Relationships ---

}"
`;
