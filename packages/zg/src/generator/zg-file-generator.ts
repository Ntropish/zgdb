import { NormalizedSchema, Field } from "../parser/types.js";
import { topologicalSort } from "./topological-sort.js";

function mapTsType(fbsType: string): string {
  const typeMap: Record<string, string> = {
    string: "string",
    long: "number",
    bool: "boolean",
  };
  return typeMap[fbsType] || "any"; // Default for nested tables etc.
}

function generateInterface(schema: NormalizedSchema): string {
  const fields = schema.fields
    .map((f) => `  ${f.name}: ${mapTsType(f.type)};`)
    .join("\n");

  // TODO: Add relationships to interface
  return `export interface I${schema.name} {\n${fields}\n}`;
}

function generateNodeClass(schema: NormalizedSchema): string {
  const fields = schema.fields
    .map(
      (f) => `  get ${f.name}(): ${mapTsType(f.type)} {
    return this.fbb.${f.name}();
  }`
    )
    .join("\n\n");

  // TODO: Add relationship accessors

  return `export class ${schema.name}Node extends ZgBaseNode<LowLevel.${schema.name}> {
  // --- Fields ---
${fields}

  // --- Relationships ---
  // (to be implemented)
}`;
}

function generateDbAccessors(schema: NormalizedSchema): string {
  const schemaNameLower =
    schema.name.charAt(0).toLowerCase() + schema.name.slice(1);
  const { auth } = schema;

  const generateAuthCheck = (
    action: "create" | "read" | "update" | "delete"
  ) => {
    if (!auth || !auth[action] || auth[action].length === 0) {
      return `        // No '${action}' auth rules defined for ${schema.name}`;
    }

    const checks = auth[action]
      .map((rule) => {
        if ("policy" in rule && rule.policy === "owner") {
          // This is a placeholder. Real implementation will need more context.
          return `        // TODO: Implement policy check for 'owner' on ${action}`;
        }
        if ("capability" in rule && rule.capability) {
          return `        if (this.authContext.hasCapability('${rule.capability}')) return;`;
        }
        return `        // Unsupported rule on ${action}: ${JSON.stringify(
          rule
        )}`;
      })
      .join("\n");

    return `
        const checkAuth = async () => {
${checks}
          throw new Error('Authorization failed for ${action} on ${schema.name}');
        };
        await checkAuth();`;
  };

  return `
  get ${schemaNameLower}s() {
    return {
      get: async (id: string): Promise<${schema.name}Node | null> => {
        if (!this.authContext) throw new Error("Auth context not set");
${generateAuthCheck("read")}
        const result = await this.db.get<LowLevel.${schema.name}, ${
    schema.name
  }Node>('${schema.name}', id, (db, fbb, ac) => new ${
    schema.name
  }Node(db, fbb, ac));
        return result;
      },
      create: async (data: Partial<I${schema.name}>>): Promise<${
    schema.name
  }Node> => {
        if (!this.authContext) throw new Error("Auth context not set");
${generateAuthCheck("create")}
        return this.db.create<LowLevel.${schema.name}, ${schema.name}Node>('${
    schema.name
  }', data, (db, fbb, ac) => new ${schema.name}Node(db, fbb, ac));
      },
      update: async (id: string, data: Partial<I${schema.name}>>): Promise<${
    schema.name
  }Node> => {
        if (!this.authContext) throw new Error("Auth context not set");
${generateAuthCheck("update")}
        return this.db.update<LowLevel.${schema.name}, ${schema.name}Node>('${
    schema.name
  }', id, data, (db, fbb, ac) => new ${schema.name}Node(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        if (!this.authContext) throw new Error("Auth context not set");
${generateAuthCheck("delete")}
        return this.db.delete('${schema.name}', id);
      }
    };
  }`;
}

export function generateZgFile(schemas: NormalizedSchema[]): string {
  const sortedSchemas = topologicalSort(schemas);

  const interfaces = sortedSchemas.map(generateInterface).join("\n\n");
  const nodeClasses = sortedSchemas.map(generateNodeClass).join("\n\n");
  const dbAccessors = sortedSchemas.map(generateDbAccessors).join("\n");

  return `// Generated by ZG. Do not edit.

import { ZgDatabase, ZgBaseNode, ZgAuthContext } from '@tsmk/zg-client';
import * as LowLevel from './schema_generated.js';

// --- Interfaces ---
${interfaces}

// --- Node Classes ---
${nodeClasses}

// --- Database Class ---
export class ZgClient {
  private db: ZgDatabase;
  private authContext: ZgAuthContext | null = null;

  constructor(config: any) {
    this.db = new ZgDatabase(config);
  }

  setAuthContext(context: ZgAuthContext) {
    this.authContext = context;
  }
${dbAccessors}
}

export function createZgClient(config: any): ZgClient {
  return new ZgClient(config);
}
`;
}
