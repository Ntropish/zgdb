// Generated by ZG. Do not edit.
import { ZgDatabase, ZgBaseNode, ZgAuthContext } from '@zgdb/client';
import * as LowLevel from './schema.js';

// --- Helper Types ---
type ResolverFn = (context: any) => any;
type ResolverMap = Record<string, ResolverFn>;
type ResolvedNode<TNode, TEntityResolvers extends ResolverMap, TGlobalResolvers extends ResolverMap> = TNode & {
  [K in keyof TEntityResolvers]: ReturnType<TEntityResolvers[K]>;
} & {
  [K in keyof TGlobalResolvers]: ReturnType<TGlobalResolvers[K]>;
};

// --- Interfaces ---
export interface IUser {
  id: string;
  publicKey: string;
  displayName: string;
  avatarUrl: string;
}

export interface IPost {
  id: string;
  title: string;
  content: string;
  authorId: string;
  createdAt: bigint;
}

export interface IComment {
  id: string;
  content: string;
  authorId: string;
  postId: string;
  createdAt: bigint;
}

export interface IFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: bigint;
}

export interface IImage_Metadata {
  width: bigint;
  height: bigint;
  format: string;
  createdAt: bigint;
}

export interface IImage {
  id: string;
  url: string;
  fartCount: bigint;
  altText: string;
  metadata: any;
  postId: string;
  userId: string;
}

export interface IReaction {
  id: string;
  type: string;
  authorId: string;
  targetId: string;
  targetType: string;
}

export interface ITag {
  id: string;
  name: string;
}

export interface IPostTag {
  id: string;
  postId: string;
  tagId: string;
}

// --- Node Classes ---
export class UserNode<TActor> extends ZgBaseNode<LowLevel.User, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.User,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get publicKey(): string | null {
    return this.fbb.publicKey();
  }

  get displayName(): string | null {
    return this.fbb.displayName();
  }

  get avatarUrl(): string | null {
    return this.fbb.avatarUrl();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostNode<TActor> extends ZgBaseNode<LowLevel.Post, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Post,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get title(): string | null {
    return this.fbb.title();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class CommentNode<TActor> extends ZgBaseNode<LowLevel.Comment, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Comment,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class FollowNode<TActor> extends ZgBaseNode<LowLevel.Follow, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Follow,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get followerId(): string | null {
    return this.fbb.followerId();
  }

  get followingId(): string | null {
    return this.fbb.followingId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class Image_MetadataNode<TActor> extends ZgBaseNode<LowLevel.Image_Metadata, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Image_Metadata,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get width(): bigint {
    return this.fbb.width();
  }

  get height(): bigint {
    return this.fbb.height();
  }

  get format(): string | null {
    return this.fbb.format();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ImageNode<TActor> extends ZgBaseNode<LowLevel.Image, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Image,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get url(): string | null {
    return this.fbb.url();
  }

  get fartCount(): bigint {
    return this.fbb.fartCount();
  }

  get altText(): string | null {
    return this.fbb.altText();
  }

  get metadata(): any {
    return this.fbb.metadata();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get userId(): string | null {
    return this.fbb.userId();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ReactionNode<TActor> extends ZgBaseNode<LowLevel.Reaction, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Reaction,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get type(): string | null {
    return this.fbb.type();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get targetId(): string | null {
    return this.fbb.targetId();
  }

  get targetType(): string | null {
    return this.fbb.targetType();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class TagNode<TActor> extends ZgBaseNode<LowLevel.Tag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Tag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get name(): string | null {
    return this.fbb.name();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostTagNode<TActor> extends ZgBaseNode<LowLevel.PostTag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.PostTag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get tagId(): string | null {
    return this.fbb.tagId();
  }

  // --- Relationships ---
  // (to be implemented)
}

// --- Database Class ---
export class ZgClient<
  TActor,
  TGlobalResolvers extends ResolverMap,
  TEntityResolvers extends Record<string, ResolverMap>
> {
  private db: ZgDatabase;
  private authContext: ZgAuthContext<TActor>;

  constructor(db: ZgDatabase, authContext: ZgAuthContext<TActor>) {
    this.db = db;
    this.authContext = authContext;
  }

  get users() {
    return {
      get: (id: string): Promise<ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.User, UserNode<TActor>>(
          'User',
          id,
          (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IUser>): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> => {
        return this.db.create<LowLevel.User, UserNode<TActor>>(
          'User',
          data,
          (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IUser>): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> => {
        return this.db.update<LowLevel.User, UserNode<TActor>>(
          'User',
          id,
          data,
          (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('User', id, this.authContext);
      },
    };
  }

  get posts() {
    return {
      get: (id: string): Promise<ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.Post, PostNode<TActor>>(
          'Post',
          id,
          (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IPost>): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> => {
        return this.db.create<LowLevel.Post, PostNode<TActor>>(
          'Post',
          data,
          (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IPost>): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> => {
        return this.db.update<LowLevel.Post, PostNode<TActor>>(
          'Post',
          id,
          data,
          (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('Post', id, this.authContext);
      },
    };
  }

  get comments() {
    return {
      get: (id: string): Promise<ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.Comment, CommentNode<TActor>>(
          'Comment',
          id,
          (db, fbb, ac) => new CommentNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IComment>): ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> => {
        return this.db.create<LowLevel.Comment, CommentNode<TActor>>(
          'Comment',
          data,
          (db, fbb, ac) => new CommentNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IComment>): ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> => {
        return this.db.update<LowLevel.Comment, CommentNode<TActor>>(
          'Comment',
          id,
          data,
          (db, fbb, ac) => new CommentNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('Comment', id, this.authContext);
      },
    };
  }

  get follows() {
    return {
      get: (id: string): Promise<ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.Follow, FollowNode<TActor>>(
          'Follow',
          id,
          (db, fbb, ac) => new FollowNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IFollow>): ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> => {
        return this.db.create<LowLevel.Follow, FollowNode<TActor>>(
          'Follow',
          data,
          (db, fbb, ac) => new FollowNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IFollow>): ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> => {
        return this.db.update<LowLevel.Follow, FollowNode<TActor>>(
          'Follow',
          id,
          data,
          (db, fbb, ac) => new FollowNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('Follow', id, this.authContext);
      },
    };
  }

  get image_Metadatas() {
    return {
      get: (id: string): Promise<ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>(
          'Image_Metadata',
          id,
          (db, fbb, ac) => new Image_MetadataNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IImage_Metadata>): ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> => {
        return this.db.create<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>(
          'Image_Metadata',
          data,
          (db, fbb, ac) => new Image_MetadataNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IImage_Metadata>): ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> => {
        return this.db.update<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>(
          'Image_Metadata',
          id,
          data,
          (db, fbb, ac) => new Image_MetadataNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('Image_Metadata', id, this.authContext);
      },
    };
  }

  get images() {
    return {
      get: (id: string): Promise<ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.Image, ImageNode<TActor>>(
          'Image',
          id,
          (db, fbb, ac) => new ImageNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IImage>): ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> => {
        return this.db.create<LowLevel.Image, ImageNode<TActor>>(
          'Image',
          data,
          (db, fbb, ac) => new ImageNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IImage>): ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> => {
        return this.db.update<LowLevel.Image, ImageNode<TActor>>(
          'Image',
          id,
          data,
          (db, fbb, ac) => new ImageNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('Image', id, this.authContext);
      },
    };
  }

  get reactions() {
    return {
      get: (id: string): Promise<ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.Reaction, ReactionNode<TActor>>(
          'Reaction',
          id,
          (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IReaction>): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> => {
        return this.db.create<LowLevel.Reaction, ReactionNode<TActor>>(
          'Reaction',
          data,
          (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IReaction>): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> => {
        return this.db.update<LowLevel.Reaction, ReactionNode<TActor>>(
          'Reaction',
          id,
          data,
          (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('Reaction', id, this.authContext);
      },
    };
  }

  get tags() {
    return {
      get: (id: string): Promise<ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.Tag, TagNode<TActor>>(
          'Tag',
          id,
          (db, fbb, ac) => new TagNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<ITag>): ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> => {
        return this.db.create<LowLevel.Tag, TagNode<TActor>>(
          'Tag',
          data,
          (db, fbb, ac) => new TagNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<ITag>): ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> => {
        return this.db.update<LowLevel.Tag, TagNode<TActor>>(
          'Tag',
          id,
          data,
          (db, fbb, ac) => new TagNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('Tag', id, this.authContext);
      },
    };
  }

  get postTags() {
    return {
      get: (id: string): Promise<ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> | null> => {
        return this.db.get<LowLevel.PostTag, PostTagNode<TActor>>(
          'PostTag',
          id,
          (db, fbb, ac) => new PostTagNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as Promise<ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> | null>;
      },
      create: (data: Partial<IPostTag>): ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> => {
        return this.db.create<LowLevel.PostTag, PostTagNode<TActor>>(
          'PostTag',
          data,
          (db, fbb, ac) => new PostTagNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<IPostTag>): ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> => {
        return this.db.update<LowLevel.PostTag, PostTagNode<TActor>>(
          'PostTag',
          id,
          data,
          (db, fbb, ac) => new PostTagNode<TActor>(db, fbb, ac),
          this.authContext,
        ) as ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers>;
      },
      delete: (id: string) => {
        return this.db.delete('PostTag', id, this.authContext);
      },
    };
  }
}

// The main database instance, created once
class Database<
  TGlobalResolvers extends ResolverMap,
  TEntityResolvers extends Record<string, ResolverMap>
> {
  private db: ZgDatabase;

  constructor(config: {
    globalResolvers: TGlobalResolvers;
    entityResolvers: TEntityResolvers;
    auth: Record<string, any>;
  }) {
    this.db = new ZgDatabase(config);
  }

  createClient<TActor>(actor: TActor): ZgClient<TActor, TGlobalResolvers, TEntityResolvers> {
    return new ZgClient(this.db, { actor });
  }
}

export function createDB<
  TActor,
  const TGlobalResolvers extends ResolverMap,
  const TEntityResolvers extends Record<string, ResolverMap>
>(config: {
  globalResolvers: TGlobalResolvers;
  entityResolvers: TEntityResolvers;
  auth: Record<string, any>;
}): Database<TGlobalResolvers, TEntityResolvers> {
  return new Database(config);
}
