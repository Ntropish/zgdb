// Generated by ZG. Do not edit.
import { ZgDatabase, ZgBaseNode, ZgAuthContext } from '@zgdb/client';
import * as LowLevel from './schema.js';
import { Builder, ByteBuffer } from 'flatbuffers';

// --- Helper Types ---
type ResolverFn = (context: any) => any;
type ResolverMap = Record<string, ResolverFn>;
type ResolvedNode<TNode, TEntityResolvers extends ResolverMap, TGlobalResolvers extends ResolverMap> = TNode & {
  [K in keyof TEntityResolvers]: ReturnType<TEntityResolvers[K]>;
} & {
  [K in keyof TGlobalResolvers]: ReturnType<TGlobalResolvers[K]>;
};

// --- Interfaces ---
export interface IUser {
  id: string;
  publicKey: string;
  displayName: string;
  avatarUrl: string;
}

export interface IPost {
  id: string;
  title: string;
  content: string;
  authorId: string;
  createdAt: bigint;
}

export interface IComment {
  id: string;
  content: string;
  authorId: string;
  postId: string;
  createdAt: bigint;
}

export interface IFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: bigint;
}

export interface IImage_Metadata {
  width: bigint;
  height: bigint;
  format: string;
  createdAt: bigint;
}

export interface IImage {
  id: string;
  url: string;
  fartCount: bigint;
  altText: string;
  metadata: any;
  postId: string;
  userId: string;
}

export interface IReaction {
  id: string;
  type: string;
  authorId: string;
  targetId: string;
  targetType: string;
}

export interface ITag {
  id: string;
  name: string;
}

export interface IPostTag {
  id: string;
  postId: string;
  tagId: string;
}

// --- Node Classes ---
export class UserNode<TActor> extends ZgBaseNode<LowLevel.User, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.User,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get publicKey(): string | null {
    return this.fbb.publicKey();
  }

  get displayName(): string | null {
    return this.fbb.displayName();
  }

  get avatarUrl(): string | null {
    return this.fbb.avatarUrl();
  }

  // --- Relationships ---
  get posts(): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null {
    const id = this.fbb.postsId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Post, PostNode<TActor>>(
      'Post',
      id,
      (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Post.getRootAsPost(bb),
      this.authContext
    ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null;
  }

  get comments(): ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null {
    const id = this.fbb.commentsId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Comment, CommentNode<TActor>>(
      'Comment',
      id,
      (db, fbb, ac) => new CommentNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Comment.getRootAsComment(bb),
      this.authContext
    ) as ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null;
  }

  get reactions(): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null {
    const id = this.fbb.reactionsId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Reaction, ReactionNode<TActor>>(
      'Reaction',
      id,
      (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Reaction.getRootAsReaction(bb),
      this.authContext
    ) as ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null;
  }

  get following(): ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null {
    const id = this.fbb.followingId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Follow, FollowNode<TActor>>(
      'Follow',
      id,
      (db, fbb, ac) => new FollowNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Follow.getRootAsFollow(bb),
      this.authContext
    ) as ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null;
  }

  get followers(): ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null {
    const id = this.fbb.followersId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Follow, FollowNode<TActor>>(
      'Follow',
      id,
      (db, fbb, ac) => new FollowNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Follow.getRootAsFollow(bb),
      this.authContext
    ) as ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null;
  }
}

export class PostNode<TActor> extends ZgBaseNode<LowLevel.Post, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Post,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get title(): string | null {
    return this.fbb.title();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  get author(): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null {
    const id = this.fbb.authorId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.User, UserNode<TActor>>(
      'User',
      id,
      (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.User.getRootAsUser(bb),
      this.authContext
    ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null;
  }

  get comments(): ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null {
    const id = this.fbb.commentsId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Comment, CommentNode<TActor>>(
      'Comment',
      id,
      (db, fbb, ac) => new CommentNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Comment.getRootAsComment(bb),
      this.authContext
    ) as ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null;
  }

  get images(): ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> | null {
    const id = this.fbb.imagesId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Image, ImageNode<TActor>>(
      'Image',
      id,
      (db, fbb, ac) => new ImageNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Image.getRootAsImage(bb),
      this.authContext
    ) as ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> | null;
  }

  get reactions(): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null {
    const id = this.fbb.reactionsId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Reaction, ReactionNode<TActor>>(
      'Reaction',
      id,
      (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Reaction.getRootAsReaction(bb),
      this.authContext
    ) as ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null;
  }
}

export class CommentNode<TActor> extends ZgBaseNode<LowLevel.Comment, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Comment,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  get author(): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null {
    const id = this.fbb.authorId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.User, UserNode<TActor>>(
      'User',
      id,
      (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.User.getRootAsUser(bb),
      this.authContext
    ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null;
  }

  get post(): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null {
    const id = this.fbb.postId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Post, PostNode<TActor>>(
      'Post',
      id,
      (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Post.getRootAsPost(bb),
      this.authContext
    ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null;
  }

  get reactions(): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null {
    const id = this.fbb.reactionsId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Reaction, ReactionNode<TActor>>(
      'Reaction',
      id,
      (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Reaction.getRootAsReaction(bb),
      this.authContext
    ) as ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null;
  }
}

export class FollowNode<TActor> extends ZgBaseNode<LowLevel.Follow, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Follow,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get followerId(): string | null {
    return this.fbb.followerId();
  }

  get followingId(): string | null {
    return this.fbb.followingId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  get follower(): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null {
    const id = this.fbb.followerId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.User, UserNode<TActor>>(
      'User',
      id,
      (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.User.getRootAsUser(bb),
      this.authContext
    ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null;
  }

  get following(): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null {
    const id = this.fbb.followingId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.User, UserNode<TActor>>(
      'User',
      id,
      (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.User.getRootAsUser(bb),
      this.authContext
    ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null;
  }
}

export class Image_MetadataNode<TActor> extends ZgBaseNode<LowLevel.Image_Metadata, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Image_Metadata,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get width(): bigint {
    return this.fbb.width();
  }

  get height(): bigint {
    return this.fbb.height();
  }

  get format(): string | null {
    return this.fbb.format();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---

}

export class ImageNode<TActor> extends ZgBaseNode<LowLevel.Image, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Image,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get url(): string | null {
    return this.fbb.url();
  }

  get fartCount(): bigint {
    return this.fbb.fartCount();
  }

  get altText(): string | null {
    return this.fbb.altText();
  }

  get metadata(): any {
    return this.fbb.metadata();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get userId(): string | null {
    return this.fbb.userId();
  }

  // --- Relationships ---
  get post(): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null {
    const id = this.fbb.postId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Post, PostNode<TActor>>(
      'Post',
      id,
      (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Post.getRootAsPost(bb),
      this.authContext
    ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null;
  }

  get user(): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null {
    const id = this.fbb.userId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.User, UserNode<TActor>>(
      'User',
      id,
      (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.User.getRootAsUser(bb),
      this.authContext
    ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null;
  }
}

export class ReactionNode<TActor> extends ZgBaseNode<LowLevel.Reaction, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Reaction,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get type(): string | null {
    return this.fbb.type();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get targetId(): string | null {
    return this.fbb.targetId();
  }

  get targetType(): string | null {
    return this.fbb.targetType();
  }

  // --- Relationships ---
  get author(): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null {
    const id = this.fbb.authorId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.User, UserNode<TActor>>(
      'User',
      id,
      (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.User.getRootAsUser(bb),
      this.authContext
    ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null;
  }
}

export class TagNode<TActor> extends ZgBaseNode<LowLevel.Tag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Tag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get name(): string | null {
    return this.fbb.name();
  }

  // --- Relationships ---

}

export class PostTagNode<TActor> extends ZgBaseNode<LowLevel.PostTag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.PostTag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get tagId(): string | null {
    return this.fbb.tagId();
  }

  // --- Relationships ---
  get post(): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null {
    const id = this.fbb.postId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Post, PostNode<TActor>>(
      'Post',
      id,
      (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Post.getRootAsPost(bb),
      this.authContext
    ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null;
  }

  get tag(): ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> | null {
    const id = this.fbb.tagId();
    if (!id) {
      return null;
    }
    // This assumes the generator will correctly pass down the full TEntityResolvers and TGlobalResolvers types
    return this.db.get<LowLevel.Tag, TagNode<TActor>>(
      'Tag',
      id,
      (db, fbb, ac) => new TagNode<TActor>(db, fbb, ac),
      (bb) => LowLevel.Tag.getRootAsTag(bb),
      this.authContext
    ) as ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> | null;
  }
}

// --- Database Class ---
export class ZgClient<
  TActor,
  TGlobalResolvers extends ResolverMap,
  TEntityResolvers extends Record<string, ResolverMap>
> {
  private db: ZgDatabase;
  private authContext: ZgAuthContext<TActor>;

  constructor(db: ZgDatabase, authContext: ZgAuthContext<TActor>) {
    this.db = db;
    this.authContext = authContext;
  }

  get users() {
    return {
      get: (id: string): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.User, UserNode<TActor>>(
          'User',
          id,
          (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.User.getRootAsUser(bb),
          this.authContext,
        ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, publicKey: string, displayName: string, avatarUrl: string }): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const publicKeyOffset = builder.createString(data.publicKey);
    const displayNameOffset = builder.createString(data.displayName);
    const avatarUrlOffset = builder.createString(data.avatarUrl);
        
        const entityOffset = LowLevel.User.createUser(builder, idOffset, publicKeyOffset, displayNameOffset, avatarUrlOffset);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.User, UserNode<TActor>>(
          'User',
          data.id,
          buffer,
          (db, fbb, ac) => new UserNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.User.getRootAsUser(bb),
          this.authContext,
        ) as ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, publicKey: string, displayName: string, avatarUrl: string }>): ResolvedNode<UserNode<TActor>, TEntityResolvers["User"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get posts() {
    return {
      get: (id: string): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.Post, PostNode<TActor>>(
          'Post',
          id,
          (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Post.getRootAsPost(bb),
          this.authContext,
        ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, title: string, content: string, authorId: string, createdAt: bigint }): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const titleOffset = builder.createString(data.title);
    const contentOffset = builder.createString(data.content);
    const authorIdOffset = builder.createString(data.authorId);
        
        const entityOffset = LowLevel.Post.createPost(builder, idOffset, titleOffset, contentOffset, authorIdOffset, data.createdAt);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.Post, PostNode<TActor>>(
          'Post',
          data.id,
          buffer,
          (db, fbb, ac) => new PostNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Post.getRootAsPost(bb),
          this.authContext,
        ) as ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, title: string, content: string, authorId: string, createdAt: bigint }>): ResolvedNode<PostNode<TActor>, TEntityResolvers["Post"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get comments() {
    return {
      get: (id: string): ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.Comment, CommentNode<TActor>>(
          'Comment',
          id,
          (db, fbb, ac) => new CommentNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Comment.getRootAsComment(bb),
          this.authContext,
        ) as ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, content: string, authorId: string, postId: string, createdAt: bigint }): ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const contentOffset = builder.createString(data.content);
    const authorIdOffset = builder.createString(data.authorId);
    const postIdOffset = builder.createString(data.postId);
        
        const entityOffset = LowLevel.Comment.createComment(builder, idOffset, contentOffset, authorIdOffset, postIdOffset, data.createdAt);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.Comment, CommentNode<TActor>>(
          'Comment',
          data.id,
          buffer,
          (db, fbb, ac) => new CommentNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Comment.getRootAsComment(bb),
          this.authContext,
        ) as ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, content: string, authorId: string, postId: string, createdAt: bigint }>): ResolvedNode<CommentNode<TActor>, TEntityResolvers["Comment"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get follows() {
    return {
      get: (id: string): ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.Follow, FollowNode<TActor>>(
          'Follow',
          id,
          (db, fbb, ac) => new FollowNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Follow.getRootAsFollow(bb),
          this.authContext,
        ) as ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, followerId: string, followingId: string, createdAt: bigint }): ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const followerIdOffset = builder.createString(data.followerId);
    const followingIdOffset = builder.createString(data.followingId);
        
        const entityOffset = LowLevel.Follow.createFollow(builder, idOffset, followerIdOffset, followingIdOffset, data.createdAt);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.Follow, FollowNode<TActor>>(
          'Follow',
          data.id,
          buffer,
          (db, fbb, ac) => new FollowNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Follow.getRootAsFollow(bb),
          this.authContext,
        ) as ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, followerId: string, followingId: string, createdAt: bigint }>): ResolvedNode<FollowNode<TActor>, TEntityResolvers["Follow"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get image_Metadatas() {
    return {
      get: (id: string): ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>(
          'Image_Metadata',
          id,
          (db, fbb, ac) => new Image_MetadataNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Image_Metadata.getRootAsImage_Metadata(bb),
          this.authContext,
        ) as ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> | null;
      },
      create: (data: { width: bigint, height: bigint, format: string, createdAt: bigint }): ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const formatOffset = builder.createString(data.format);
        
        const entityOffset = LowLevel.Image_Metadata.createImage_Metadata(builder, data.width, data.height, formatOffset, data.createdAt);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>(
          'Image_Metadata',
          data.id,
          buffer,
          (db, fbb, ac) => new Image_MetadataNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Image_Metadata.getRootAsImage_Metadata(bb),
          this.authContext,
        ) as ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ width: bigint, height: bigint, format: string, createdAt: bigint }>): ResolvedNode<Image_MetadataNode<TActor>, TEntityResolvers["Image_Metadata"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get images() {
    return {
      get: (id: string): ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.Image, ImageNode<TActor>>(
          'Image',
          id,
          (db, fbb, ac) => new ImageNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Image.getRootAsImage(bb),
          this.authContext,
        ) as ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, url: string, fartCount: bigint, altText: string, metadata: any, postId: string, userId: string }): ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const urlOffset = builder.createString(data.url);
    const altTextOffset = builder.createString(data.altText);
    const postIdOffset = builder.createString(data.postId);
    const userIdOffset = builder.createString(data.userId);
        
        const entityOffset = LowLevel.Image.createImage(builder, idOffset, urlOffset, data.fartCount, altTextOffset, data.metadata, postIdOffset, userIdOffset);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.Image, ImageNode<TActor>>(
          'Image',
          data.id,
          buffer,
          (db, fbb, ac) => new ImageNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Image.getRootAsImage(bb),
          this.authContext,
        ) as ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, url: string, fartCount: bigint, altText: string, metadata: any, postId: string, userId: string }>): ResolvedNode<ImageNode<TActor>, TEntityResolvers["Image"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get reactions() {
    return {
      get: (id: string): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.Reaction, ReactionNode<TActor>>(
          'Reaction',
          id,
          (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Reaction.getRootAsReaction(bb),
          this.authContext,
        ) as ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, type: string, authorId: string, targetId: string, targetType: string }): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const typeOffset = builder.createString(data.type);
    const authorIdOffset = builder.createString(data.authorId);
    const targetIdOffset = builder.createString(data.targetId);
    const targetTypeOffset = builder.createString(data.targetType);
        
        const entityOffset = LowLevel.Reaction.createReaction(builder, idOffset, typeOffset, authorIdOffset, targetIdOffset, targetTypeOffset);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.Reaction, ReactionNode<TActor>>(
          'Reaction',
          data.id,
          buffer,
          (db, fbb, ac) => new ReactionNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Reaction.getRootAsReaction(bb),
          this.authContext,
        ) as ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, type: string, authorId: string, targetId: string, targetType: string }>): ResolvedNode<ReactionNode<TActor>, TEntityResolvers["Reaction"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get tags() {
    return {
      get: (id: string): ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.Tag, TagNode<TActor>>(
          'Tag',
          id,
          (db, fbb, ac) => new TagNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Tag.getRootAsTag(bb),
          this.authContext,
        ) as ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, name: string }): ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const nameOffset = builder.createString(data.name);
        
        const entityOffset = LowLevel.Tag.createTag(builder, idOffset, nameOffset);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.Tag, TagNode<TActor>>(
          'Tag',
          data.id,
          buffer,
          (db, fbb, ac) => new TagNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.Tag.getRootAsTag(bb),
          this.authContext,
        ) as ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, name: string }>): ResolvedNode<TagNode<TActor>, TEntityResolvers["Tag"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }

  get postTags() {
    return {
      get: (id: string): ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> | null => {
        return this.db.get<LowLevel.PostTag, PostTagNode<TActor>>(
          'PostTag',
          id,
          (db, fbb, ac) => new PostTagNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.PostTag.getRootAsPostTag(bb),
          this.authContext,
        ) as ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> | null;
      },
      create: (data: { id: string, postId: string, tagId: string }): ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> => {
        const builder = new Builder(1024);
        
    const idOffset = builder.createString(data.id);
    const postIdOffset = builder.createString(data.postId);
    const tagIdOffset = builder.createString(data.tagId);
        
        const entityOffset = LowLevel.PostTag.createPostTag(builder, idOffset, postIdOffset, tagIdOffset);
        builder.finish(entityOffset);
        
        const buffer = builder.asUint8Array();
        
        if (!data.id || typeof data.id !== 'string') {
          throw new Error("The 'id' field is required and must be a string to create an entity.");
        }

        return this.db.create<LowLevel.PostTag, PostTagNode<TActor>>(
          'PostTag',
          data.id,
          buffer,
          (db, fbb, ac) => new PostTagNode<TActor>(db, fbb, ac),
          (bb) => LowLevel.PostTag.getRootAsPostTag(bb),
          this.authContext,
        ) as ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers>;
      },
      update: (id: string, data: Partial<{ id: string, postId: string, tagId: string }>): ResolvedNode<PostTagNode<TActor>, TEntityResolvers["PostTag"], TGlobalResolvers> => {
        // Update is more complex: it requires getting the old buffer,
        // parsing it, creating a new buffer with the merged data,
        // and then writing it back. This is a placeholder.
        throw new Error("Update is not implemented yet.");
      },
    };
  }
}

// The main database instance, created once
class Database<
  TGlobalResolvers extends ResolverMap,
  TEntityResolvers extends Record<string, ResolverMap>
> {
  private db: ZgDatabase;

  constructor(config: {
    globalResolvers: TGlobalResolvers;
    entityResolvers: TEntityResolvers;
    auth: Record<string, any>;
  }) {
    this.db = new ZgDatabase(config);
  }

  createClient<TActor>(actor: TActor): ZgClient<TActor, TGlobalResolvers, TEntityResolvers> {
    return new ZgClient(this.db, { actor });
  }
}

export function createDB<
  TActor,
  const TGlobalResolvers extends ResolverMap,
  const TEntityResolvers extends Record<string, ResolverMap>
>(config: {
  globalResolvers: TGlobalResolvers;
  entityResolvers: TEntityResolvers;
  auth: Record<string, any>;
}): Database<TGlobalResolvers, TEntityResolvers> {
  return new Database(config);
}
