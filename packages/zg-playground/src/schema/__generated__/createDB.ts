// Generated by ZG. Do not edit.
import { ZgDatabase, ZgBaseNode, ZgAuthContext } from '@zgdb/client';
import * as LowLevel from './schema.js';

// --- Interfaces ---
export interface IUser {
  id: string;
  publicKey: string;
  displayName: string;
  avatarUrl: string;
}

export interface IPost {
  id: string;
  title: string;
  content: string;
  author: string;
  createdAt: bigint;
}

export interface IComment {
  id: string;
  content: string;
  authorId: string;
  postId: string;
  createdAt: bigint;
}

export interface IFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: bigint;
}

export interface IImage_Metadata {
  width: bigint;
  height: bigint;
  format: string;
  createdAt: bigint;
}

export interface IImage {
  id: string;
  url: string;
  fartCount: bigint;
  altText: string;
  metadata: any;
  postId: string;
  userId: string;
}

export interface IReaction {
  id: string;
  type: string;
  authorId: string;
  targetId: string;
  targetType: string;
}

export interface ITag {
  id: string;
  name: string;
}

export interface IPostTag {
  id: string;
  postId: string;
  tagId: string;
}

// --- Node Classes ---
export class UserNode<TActor> extends ZgBaseNode<LowLevel.User, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.User,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get publicKey(): string | null {
    return this.fbb.publicKey();
  }

  get displayName(): string | null {
    return this.fbb.displayName();
  }

  get avatarUrl(): string | null {
    return this.fbb.avatarUrl();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostNode<TActor> extends ZgBaseNode<LowLevel.Post, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Post,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get title(): string | null {
    return this.fbb.title();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get author(): string | null {
    return this.fbb.author();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class CommentNode<TActor> extends ZgBaseNode<LowLevel.Comment, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Comment,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get content(): string | null {
    return this.fbb.content();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class FollowNode<TActor> extends ZgBaseNode<LowLevel.Follow, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Follow,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get followerId(): string | null {
    return this.fbb.followerId();
  }

  get followingId(): string | null {
    return this.fbb.followingId();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class Image_MetadataNode<TActor> extends ZgBaseNode<LowLevel.Image_Metadata, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Image_Metadata,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get width(): bigint {
    return this.fbb.width();
  }

  get height(): bigint {
    return this.fbb.height();
  }

  get format(): string | null {
    return this.fbb.format();
  }

  get createdAt(): bigint {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ImageNode<TActor> extends ZgBaseNode<LowLevel.Image, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Image,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get url(): string | null {
    return this.fbb.url();
  }

  get fartCount(): bigint {
    return this.fbb.fartCount();
  }

  get altText(): string | null {
    return this.fbb.altText();
  }

  get metadata(): any {
    return this.fbb.metadata();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get userId(): string | null {
    return this.fbb.userId();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ReactionNode<TActor> extends ZgBaseNode<LowLevel.Reaction, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Reaction,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get type(): string | null {
    return this.fbb.type();
  }

  get authorId(): string | null {
    return this.fbb.authorId();
  }

  get targetId(): string | null {
    return this.fbb.targetId();
  }

  get targetType(): string | null {
    return this.fbb.targetType();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class TagNode<TActor> extends ZgBaseNode<LowLevel.Tag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.Tag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get name(): string | null {
    return this.fbb.name();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostTagNode<TActor> extends ZgBaseNode<LowLevel.PostTag, TActor> {
  constructor(
    db: ZgDatabase,
    fbb: LowLevel.PostTag,
    authContext: ZgAuthContext<TActor> | null
  ) {
    super(db, fbb, authContext);
  }

  // --- Fields ---
  get id(): string | null {
    return this.fbb.id();
  }

  get postId(): string | null {
    return this.fbb.postId();
  }

  get tagId(): string | null {
    return this.fbb.tagId();
  }

  // --- Relationships ---
  // (to be implemented)
}

// --- Database Class ---
export class ZgClient<TActor> {
  private db: ZgDatabase;
  private authContext: ZgAuthContext<TActor> | null = null;

  constructor() {
    this.db = new ZgDatabase();
  }

  setAuthContext(context: ZgAuthContext<TActor>) {
    this.authContext = context;
  }

  get users() {
    return {
      get: async (id: string): Promise<UserNode<TActor> | null> => {
        return this.db.get<LowLevel.User, UserNode<TActor>>('User', id, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      create: (data: Partial<IUser>): UserNode<TActor> => {
        return this.db.create<LowLevel.User, UserNode<TActor>>('User', data, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IUser>): UserNode<TActor> => {
        return this.db.update<LowLevel.User, UserNode<TActor>>('User', id, data, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('User', id);
      }
    };
  }

  get posts() {
    return {
      get: async (id: string): Promise<PostNode<TActor> | null> => {
        return this.db.get<LowLevel.Post, PostNode<TActor>>('Post', id, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      create: (data: Partial<IPost>): PostNode<TActor> => {
        return this.db.create<LowLevel.Post, PostNode<TActor>>('Post', data, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IPost>): PostNode<TActor> => {
        return this.db.update<LowLevel.Post, PostNode<TActor>>('Post', id, data, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Post', id);
      }
    };
  }

  get comments() {
    return {
      get: async (id: string): Promise<CommentNode<TActor> | null> => {
        return this.db.get<LowLevel.Comment, CommentNode<TActor>>('Comment', id, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      create: (data: Partial<IComment>): CommentNode<TActor> => {
        return this.db.create<LowLevel.Comment, CommentNode<TActor>>('Comment', data, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IComment>): CommentNode<TActor> => {
        return this.db.update<LowLevel.Comment, CommentNode<TActor>>('Comment', id, data, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Comment', id);
      }
    };
  }

  get follows() {
    return {
      get: async (id: string): Promise<FollowNode<TActor> | null> => {
        return this.db.get<LowLevel.Follow, FollowNode<TActor>>('Follow', id, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      create: (data: Partial<IFollow>): FollowNode<TActor> => {
        return this.db.create<LowLevel.Follow, FollowNode<TActor>>('Follow', data, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IFollow>): FollowNode<TActor> => {
        return this.db.update<LowLevel.Follow, FollowNode<TActor>>('Follow', id, data, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Follow', id);
      }
    };
  }

  get image_Metadatas() {
    return {
      get: async (id: string): Promise<Image_MetadataNode<TActor> | null> => {
        return this.db.get<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>('Image_Metadata', id, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      create: (data: Partial<IImage_Metadata>): Image_MetadataNode<TActor> => {
        return this.db.create<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>('Image_Metadata', data, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IImage_Metadata>): Image_MetadataNode<TActor> => {
        return this.db.update<LowLevel.Image_Metadata, Image_MetadataNode<TActor>>('Image_Metadata', id, data, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Image_Metadata', id);
      }
    };
  }

  get images() {
    return {
      get: async (id: string): Promise<ImageNode<TActor> | null> => {
        return this.db.get<LowLevel.Image, ImageNode<TActor>>('Image', id, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      create: (data: Partial<IImage>): ImageNode<TActor> => {
        return this.db.create<LowLevel.Image, ImageNode<TActor>>('Image', data, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IImage>): ImageNode<TActor> => {
        return this.db.update<LowLevel.Image, ImageNode<TActor>>('Image', id, data, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Image', id);
      }
    };
  }

  get reactions() {
    return {
      get: async (id: string): Promise<ReactionNode<TActor> | null> => {
        return this.db.get<LowLevel.Reaction, ReactionNode<TActor>>('Reaction', id, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      create: (data: Partial<IReaction>): ReactionNode<TActor> => {
        return this.db.create<LowLevel.Reaction, ReactionNode<TActor>>('Reaction', data, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IReaction>): ReactionNode<TActor> => {
        return this.db.update<LowLevel.Reaction, ReactionNode<TActor>>('Reaction', id, data, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Reaction', id);
      }
    };
  }

  get tags() {
    return {
      get: async (id: string): Promise<TagNode<TActor> | null> => {
        return this.db.get<LowLevel.Tag, TagNode<TActor>>('Tag', id, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      create: (data: Partial<ITag>): TagNode<TActor> => {
        return this.db.create<LowLevel.Tag, TagNode<TActor>>('Tag', data, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<ITag>): TagNode<TActor> => {
        return this.db.update<LowLevel.Tag, TagNode<TActor>>('Tag', id, data, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Tag', id);
      }
    };
  }

  get postTags() {
    return {
      get: async (id: string): Promise<PostTagNode<TActor> | null> => {
        return this.db.get<LowLevel.PostTag, PostTagNode<TActor>>('PostTag', id, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      create: (data: Partial<IPostTag>): PostTagNode<TActor> => {
        return this.db.create<LowLevel.PostTag, PostTagNode<TActor>>('PostTag', data, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      update: (id: string, data: Partial<IPostTag>): PostTagNode<TActor> => {
        return this.db.update<LowLevel.PostTag, PostTagNode<TActor>>('PostTag', id, data, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('PostTag', id);
      }
    };
  }
}

export function createDB<TActor>(config: {
  globalResolvers: Record<string, Function>;
  entityResolvers: Record<string, Record<string, Function>>;
  auth: Record<string, any>;
}) {
  const client = new ZgClient<TActor>();
  // TODO: Attach runtime resolvers and auth config
  return client;
}
