// Generated by ZG. Do not edit.
import { ZgDatabase, ZgBaseNode, ZgAuthContext } from '@zgdb/client';
import * as LowLevel from './schema_generated.js';

// --- Interfaces ---
export interface IUser {
  id: string;
  publicKey: string;
  displayName: string;
  avatarUrl: string;
}

export interface IPost {
  id: string;
  title: string;
  content: string;
  author: string;
  createdAt: number;
}

export interface IComment {
  id: string;
  content: string;
  authorId: string;
  postId: string;
  createdAt: number;
}

export interface IFollow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: number;
}

export interface IImage_Metadata {
  width: number;
  height: number;
  format: string;
  createdAt: number;
}

export interface IImage {
  id: string;
  url: string;
  altText: string;
  metadata: any;
  postId: string;
  userId: string;
}

export interface IReaction {
  id: string;
  type: string;
  authorId: string;
  targetId: string;
  targetType: string;
}

export interface ITag {
  id: string;
  name: string;
}

export interface IPostTag {
  id: string;
  postId: string;
  tagId: string;
}

// --- Node Classes ---
export class UserNode extends ZgBaseNode<LowLevel.User> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get publicKey(): string {
    return this.fbb.publicKey();
  }

  get displayName(): string {
    return this.fbb.displayName();
  }

  get avatarUrl(): string {
    return this.fbb.avatarUrl();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostNode extends ZgBaseNode<LowLevel.Post> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get title(): string {
    return this.fbb.title();
  }

  get content(): string {
    return this.fbb.content();
  }

  get author(): string {
    return this.fbb.author();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class CommentNode extends ZgBaseNode<LowLevel.Comment> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get content(): string {
    return this.fbb.content();
  }

  get authorId(): string {
    return this.fbb.authorId();
  }

  get postId(): string {
    return this.fbb.postId();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class FollowNode extends ZgBaseNode<LowLevel.Follow> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get followerId(): string {
    return this.fbb.followerId();
  }

  get followingId(): string {
    return this.fbb.followingId();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class Image_MetadataNode extends ZgBaseNode<LowLevel.Image_Metadata> {
  // --- Fields ---
  get width(): number {
    return this.fbb.width();
  }

  get height(): number {
    return this.fbb.height();
  }

  get format(): string {
    return this.fbb.format();
  }

  get createdAt(): number {
    return this.fbb.createdAt();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ImageNode extends ZgBaseNode<LowLevel.Image> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get url(): string {
    return this.fbb.url();
  }

  get altText(): string {
    return this.fbb.altText();
  }

  get metadata(): any {
    return this.fbb.metadata();
  }

  get postId(): string {
    return this.fbb.postId();
  }

  get userId(): string {
    return this.fbb.userId();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class ReactionNode extends ZgBaseNode<LowLevel.Reaction> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get type(): string {
    return this.fbb.type();
  }

  get authorId(): string {
    return this.fbb.authorId();
  }

  get targetId(): string {
    return this.fbb.targetId();
  }

  get targetType(): string {
    return this.fbb.targetType();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class TagNode extends ZgBaseNode<LowLevel.Tag> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get name(): string {
    return this.fbb.name();
  }

  // --- Relationships ---
  // (to be implemented)
}

export class PostTagNode extends ZgBaseNode<LowLevel.PostTag> {
  // --- Fields ---
  get id(): string {
    return this.fbb.id();
  }

  get postId(): string {
    return this.fbb.postId();
  }

  get tagId(): string {
    return this.fbb.tagId();
  }

  // --- Relationships ---
  // (to be implemented)
}

// --- Database Class ---
export class ZgClient<TActor> {
  private db: ZgDatabase;
  private authContext: ZgAuthContext<TActor> | null = null;

  constructor() {
    this.db = new ZgDatabase();
  }

  setAuthContext(context: ZgAuthContext<TActor>) {
    this.authContext = context;
  }

  get users() {
    return {
      get: async (id: string): Promise<UserNode | null> => {
        return this.db.get<LowLevel.User, UserNode>('User', id, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      create: async (data: Partial<IUser>): Promise<UserNode> => {
        return this.db.create<LowLevel.User, UserNode>('User', data, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IUser>): Promise<UserNode> => {
        return this.db.update<LowLevel.User, UserNode>('User', id, data, (db, fbb, ac) => new UserNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('User', id);
      }
    };
  }

  get posts() {
    return {
      get: async (id: string): Promise<PostNode | null> => {
        return this.db.get<LowLevel.Post, PostNode>('Post', id, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      create: async (data: Partial<IPost>): Promise<PostNode> => {
        return this.db.create<LowLevel.Post, PostNode>('Post', data, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IPost>): Promise<PostNode> => {
        return this.db.update<LowLevel.Post, PostNode>('Post', id, data, (db, fbb, ac) => new PostNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Post', id);
      }
    };
  }

  get comments() {
    return {
      get: async (id: string): Promise<CommentNode | null> => {
        return this.db.get<LowLevel.Comment, CommentNode>('Comment', id, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      create: async (data: Partial<IComment>): Promise<CommentNode> => {
        return this.db.create<LowLevel.Comment, CommentNode>('Comment', data, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IComment>): Promise<CommentNode> => {
        return this.db.update<LowLevel.Comment, CommentNode>('Comment', id, data, (db, fbb, ac) => new CommentNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Comment', id);
      }
    };
  }

  get follows() {
    return {
      get: async (id: string): Promise<FollowNode | null> => {
        return this.db.get<LowLevel.Follow, FollowNode>('Follow', id, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      create: async (data: Partial<IFollow>): Promise<FollowNode> => {
        return this.db.create<LowLevel.Follow, FollowNode>('Follow', data, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IFollow>): Promise<FollowNode> => {
        return this.db.update<LowLevel.Follow, FollowNode>('Follow', id, data, (db, fbb, ac) => new FollowNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Follow', id);
      }
    };
  }

  get image_Metadatas() {
    return {
      get: async (id: string): Promise<Image_MetadataNode | null> => {
        return this.db.get<LowLevel.Image_Metadata, Image_MetadataNode>('Image_Metadata', id, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      create: async (data: Partial<IImage_Metadata>): Promise<Image_MetadataNode> => {
        return this.db.create<LowLevel.Image_Metadata, Image_MetadataNode>('Image_Metadata', data, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IImage_Metadata>): Promise<Image_MetadataNode> => {
        return this.db.update<LowLevel.Image_Metadata, Image_MetadataNode>('Image_Metadata', id, data, (db, fbb, ac) => new Image_MetadataNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Image_Metadata', id);
      }
    };
  }

  get images() {
    return {
      get: async (id: string): Promise<ImageNode | null> => {
        return this.db.get<LowLevel.Image, ImageNode>('Image', id, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      create: async (data: Partial<IImage>): Promise<ImageNode> => {
        return this.db.create<LowLevel.Image, ImageNode>('Image', data, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IImage>): Promise<ImageNode> => {
        return this.db.update<LowLevel.Image, ImageNode>('Image', id, data, (db, fbb, ac) => new ImageNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Image', id);
      }
    };
  }

  get reactions() {
    return {
      get: async (id: string): Promise<ReactionNode | null> => {
        return this.db.get<LowLevel.Reaction, ReactionNode>('Reaction', id, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      create: async (data: Partial<IReaction>): Promise<ReactionNode> => {
        return this.db.create<LowLevel.Reaction, ReactionNode>('Reaction', data, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IReaction>): Promise<ReactionNode> => {
        return this.db.update<LowLevel.Reaction, ReactionNode>('Reaction', id, data, (db, fbb, ac) => new ReactionNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Reaction', id);
      }
    };
  }

  get tags() {
    return {
      get: async (id: string): Promise<TagNode | null> => {
        return this.db.get<LowLevel.Tag, TagNode>('Tag', id, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      create: async (data: Partial<ITag>): Promise<TagNode> => {
        return this.db.create<LowLevel.Tag, TagNode>('Tag', data, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<ITag>): Promise<TagNode> => {
        return this.db.update<LowLevel.Tag, TagNode>('Tag', id, data, (db, fbb, ac) => new TagNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('Tag', id);
      }
    };
  }

  get postTags() {
    return {
      get: async (id: string): Promise<PostTagNode | null> => {
        return this.db.get<LowLevel.PostTag, PostTagNode>('PostTag', id, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      create: async (data: Partial<IPostTag>): Promise<PostTagNode> => {
        return this.db.create<LowLevel.PostTag, PostTagNode>('PostTag', data, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      update: async (id: string, data: Partial<IPostTag>): Promise<PostTagNode> => {
        return this.db.update<LowLevel.PostTag, PostTagNode>('PostTag', id, data, (db, fbb, ac) => new PostTagNode(db, fbb, ac));
      },
      delete: async (id: string): Promise<void> => {
        return this.db.delete('PostTag', id);
      }
    };
  }
}

export function createDB<TActor>(config: {
  globalResolvers: Record<string, Function>;
  entityResolvers: Record<string, Record<string, Function>>;
  auth: Record<string, any>;
}) {
  const client = new ZgClient<TActor>();
  // TODO: Attach runtime resolvers and auth config
  return client;
}
